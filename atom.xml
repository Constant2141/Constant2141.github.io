<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Petrichor</title>
  
  <subtitle>空山新雨后</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zqyy.site/"/>
  <updated>2021-08-18T12:38:20.857Z</updated>
  <id>http://zqyy.site/</id>
  
  <author>
    <name>Sleven</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript代码规范</title>
    <link href="http://zqyy.site/2021/08/16/JavaScript%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://zqyy.site/2021/08/16/JavaScript代码规范/</id>
    <published>2021-08-16T08:47:04.000Z</published>
    <updated>2021-08-18T12:38:20.857Z</updated>
    
    <content type="html"><![CDATA[<p>规范你的JavaScript代码，仅列举一些个人觉得对日常coding中有帮助的点。推荐使用（非必须）。<br><span id="more"></span></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ol><li>使用 <code>Array.from</code> 代替展开符 <code>...</code> 映射迭代器，因为它避免了创建一个中间数组。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> baz = [...foo].map(bar);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> baz = <span class="built_in">Array</span>.from(foo, bar);</span><br></pre></td></tr></table></figure></li><li><p>在访问和使用对象的多个属性时使用对象解构。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> firstName = user.firstName;</span><br><span class="line">  <span class="keyword">const</span> lastName = user.lastName;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; firstName, lastName &#125; = user;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用数组展开符 … 来拷贝数组；</p></li><li>将一个可迭代对象转换成一个数组，用展开符 … 代替 Array.from<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> nodes = <span class="built_in">Array</span>.from(foo);</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> nodes = [...foo];</span><br></pre></td></tr></table></figure></li><li>将一个类数组对象转换成一个数组，用Array.from<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrLike = &#123; <span class="number">0</span>: <span class="string">&#x27;foo&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;baz&#x27;</span>, <span class="attr">length</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>.prototype.slice.call(arrLike);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>.from(arrLike);</span><br></pre></td></tr></table></figure></li><li>使用 rest 语法 … 代替 arguments<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//... 明确了你想要拉取什么参数。 而且, rest 参数是一个真正的数组，而不仅仅是类数组的 arguments</span></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;规范你的JavaScript代码，仅列举一些个人觉得对日常coding中有帮助的点。推荐使用（非必须）。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="规范" scheme="http://zqyy.site/categories/%E8%A7%84%E8%8C%83/"/>
    
      <category term="Js" scheme="http://zqyy.site/categories/%E8%A7%84%E8%8C%83/Js/"/>
    
    
      <category term="Js" scheme="http://zqyy.site/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>网络性能测试的主要概念</title>
    <link href="http://zqyy.site/2021/01/08/%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%9A%84%E4%B8%BB%E8%A6%81%E6%A6%82%E5%BF%B5/"/>
    <id>http://zqyy.site/2021/01/08/网络性能测试的主要概念/</id>
    <published>2021-01-08T08:55:16.000Z</published>
    <updated>2021-08-18T12:09:32.734Z</updated>
    
    <content type="html"><![CDATA[<p>并发量、吞吐量、RT、TPS、QPS 还有其他一些少见的概念的介绍。<br><span id="more"></span></p><h2 id="重要常见概念"><a href="#重要常见概念" class="headerlink" title="重要常见概念"></a>重要常见概念</h2><h3 id="并发量"><a href="#并发量" class="headerlink" title="并发量"></a>并发量</h3><p>系统<strong>同时</strong>能处理的请求数量,反应了系统的负载能力</p><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><p><strong>单位时间</strong>内系统能处理的请求数量，体现系统处理请求的能力，这是目前<strong>最常用</strong>的性能测试指标</p><h3 id="响应时间RT-Response-time"><a href="#响应时间RT-Response-time" class="headerlink" title="响应时间RT(Response-time)"></a>响应时间RT(Response-time)</h3><p>响应时间是一个系统最重要的指标之一，它的数值大小直接反应了系统的快慢。响应时间是指执行一个请求从开始到最后收到响应数据所花费的总体时间,即从客户端发起请求到收到服务器响应结果的时间</p><h3 id="TPS-Transactions-Per-Second"><a href="#TPS-Transactions-Per-Second" class="headerlink" title="TPS(Transactions Per Second)"></a>TPS(Transactions Per Second)</h3><p>事务数/秒。它是软件测试结果的测量单位。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数</p><blockquote><p>QPS基本类似于TPS，但是不同的是，对于一个页面的一次访问，形成一个TPS；但一次页面请求，可能产生多次对服务器的请求，服务器对这些请求，就可计入“QPS”之中<br>例：访问一个页面会请求服务器3次，一次放，产生一个“T”，产生3个“Q”</p></blockquote><h3 id="QPS-Queries-Per-Second"><a href="#QPS-Queries-Per-Second" class="headerlink" title="QPS(Queries Per Second)"></a>QPS(Queries Per Second)</h3><p>每秒查询率，是一台服务器每秒能够相应的查询次数，即1秒内完成的请求数量，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准</p><h4 id="QPS计算公式"><a href="#QPS计算公式" class="headerlink" title="QPS计算公式"></a>QPS计算公式</h4><p>QPS = 并发量 / 平均响应时间 = 某段时间内PV/这段时间秒数</p><p>单线程QPS=1000ms/RT </p><p>多线程QPS= n * （1000ms/RT）</p><blockquote><p>按照公式可见QPS随着线程的增加而线性增长，但是现实肯定不是线性增长的,毕竟服务器资源有限</p></blockquote><h4 id="QPS与RT关系"><a href="#QPS与RT关系" class="headerlink" title="QPS与RT关系"></a>QPS与RT关系</h4><p>1.对于大部分web系统，响应时间一般由CPU执行时间，线程等待时间（IO等待，sleep, wait）时间组成。QPS和RT成反比关系</p><p><img src="/2021/01/08/%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%9A%84%E4%B8%BB%E8%A6%81%E6%A6%82%E5%BF%B5/1515293-20190621163227304-811436624.jpg" alt="img"></p><p>2.在实际的测试环境中，QPS和RT并不是非常直接的反比关系</p><p><img src="/2021/01/08/%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%9A%84%E4%B8%BB%E8%A6%81%E6%A6%82%E5%BF%B5/1515293-20190621163235306-1914371029.jpg" alt="img"></p><h3 id="最佳线程数量"><a href="#最佳线程数量" class="headerlink" title="最佳线程数量"></a>最佳线程数量</h3><p>刚好消耗完服务器的瓶颈资源的临界线程数<br>公式：最佳线程数量=（（线程等待时间+线程cpu时间）/线程cpu时间）* cpu数量</p><p>特性：<br>1.在达到最佳线程数的时候，线程数量继续递增，则QPS不变，而响应时间变长，持续递增线程数量，则QPS开始下降<br>2.每个系统都有其最佳线程数量，但是不同状态下，最佳线程数量是会变化的<br>3.瓶颈资源可以是CPU,可以是内存，可以是锁资源，IO资源</p><h2 id="其他概念"><a href="#其他概念" class="headerlink" title="其他概念"></a>其他概念</h2><h3 id="bps"><a href="#bps" class="headerlink" title="bps"></a>bps</h3><p>比特率，路单位，表示bit(比特)/second(秒)。在计算机网络或者是网络运营商中，一般，<strong>宽带速率</strong>的单位用bps(或b/s)表示；bps表示比特每秒即表示每秒钟传输多少位信息。</p><h3 id="pps"><a href="#pps" class="headerlink" title="pps"></a>pps</h3><p>包转发率单位，表示包/秒，<strong>交换机</strong>每秒可以转发多少百万个数据包（Mpps），即交换机能同时转发的数据包的数量，表示交换机的交换能力。</p><h3 id="Bps"><a href="#Bps" class="headerlink" title="Bps"></a>Bps</h3><p>用户在网上<strong>下载</strong>时显示的速率单位，表示Byte(字节)/second(秒)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;并发量、吞吐量、RT、TPS、QPS 还有其他一些少见的概念的介绍。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机" scheme="http://zqyy.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="计网" scheme="http://zqyy.site/tags/%E8%AE%A1%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>常见字符编码区别</title>
    <link href="http://zqyy.site/2020/10/26/%E5%B8%B8%E8%A7%81%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E5%8C%BA%E5%88%AB/"/>
    <id>http://zqyy.site/2020/10/26/常见字符编码区别/</id>
    <published>2020-10-26T05:03:42.000Z</published>
    <updated>2021-08-18T10:27:32.664Z</updated>
    
    <content type="html"><![CDATA[<p>查阅并总结一些常见的字符编码类型，介绍其特点以及之间的区别。</p><blockquote><p><a href="https://blog.csdn.net/qq_34745204/article/details/83786775">字符编码的常用种类介绍</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/slx3320612540/article/details/81251642">微信公众号回复、接收消息中中文乱码问题的分析及解决</a><br><span id="more"></span></p></blockquote><h3 id="1、ISO8859-1-读-Latin-1"><a href="#1、ISO8859-1-读-Latin-1" class="headerlink" title="1、ISO8859-1(读 Latin-1)"></a>1、ISO8859-1(读 Latin-1)</h3><p><strong>最早</strong>的编码，<strong>单字节</strong>，字符范围0-255，应用在<strong>英文</strong>上，<strong>无法表示中文</strong>。</p><p>由于是单字节，和计算机最基础的表示单位(Byte字节)一致，所以很多时候，仍然使用ISO8859-1，其实很多协议也确实是默认使用该编码，尽管不能表示中文，但是可以在另一种编码的基础上做处理，例如虽然”中文”两个字不存在iso8859-1编码，以gb2312编码为例，应该是”d6d0 cec4”两个字符，使用iso8859-1编码的时候则将它拆开为4个字节来表示：”d6 d0 ce c4</p><h3 id="2、ASCII"><a href="#2、ASCII" class="headerlink" title="2、ASCII"></a>2、ASCII</h3><p>如今<strong>最通用</strong>的<strong>单字节</strong>编码，主要应用在<strong>英语</strong>和其他<strong>西欧语言</strong></p><h3 id="3、GB2312"><a href="#3、GB2312" class="headerlink" title="3、GB2312"></a>3、GB2312</h3><p>前面两种编码都不支持中文，于是<strong>中国</strong>制定了GB2312编码，专门表示汉字，考虑到一个字节8位只能表示256个字符，因此该编码是<strong>双字节编码</strong>，英文字母的表示和ISO8859-1一致(也就是兼容了它)，但是只支持<strong>简体汉字</strong>。与之对应的就有BIG5，中华民国制定的繁体汉字编码规范</p><h3 id="4、GBK-大字符集"><a href="#4、GBK-大字符集" class="headerlink" title="4、GBK(大字符集)"></a>4、GBK(大字符集)</h3><p>GBK是GB2312基础上<strong>扩容并兼容</strong>的标准，也是<strong>双字节</strong>,包含<strong>所有亚洲文字</strong>，即简体中文、繁体中文、日语、韩语等，同时收录的汉字也比GB2312和BIG5都要多</p><h3 id="5、Unicode"><a href="#5、Unicode" class="headerlink" title="5、Unicode"></a>5、Unicode</h3><p>如果每个国家、地区都用自己的一套编码规范，不可避免会有冲突，于是乎Unicode就成为了实现大一统的救世主，将<strong>所有的语言统一</strong>到一套编码里面，就不会有乱码问题了。</p><p>Unicode标准不断发展，目前最常用的还是<strong>2个字节表示一个字符</strong>，有些<strong>生僻字4个字节</strong>。现代OS和大多数编程语言都是直接支持Unicode的，而且完全兼容ASCII(就在一个字节的ASCII前面添上8个0嘛)，当然缺点就是，在存储英文字符的时候，浪费了一倍的空间</p><h3 id="6、UTF-16"><a href="#6、UTF-16" class="headerlink" title="6、UTF-16"></a>6、UTF-16</h3><p>UTF-16 用<strong>两个字节</strong>来表示 Unicode 转化格式，这个是<strong>定长</strong>的表示方法，不论什么字符都可以用两个字节表示，两个字节是 16 个 bit，所以叫 UTF-16。UTF-16 表示字符非常方便，每两个字节表示一个字符，这个在字符串操作时就大大<strong>简化了操作</strong>，这也是 <strong>Java 以 UTF-16</strong> 作为内存的字符存储格式的一个很重要的原因。 </p><h3 id="7、UTF-8"><a href="#7、UTF-8" class="headerlink" title="7、UTF-8"></a>7、UTF-8</h3><p>针对Unicode和UTF-16的浪费现象(有很大一部分字符用一个字节就可以表示的现在要两个字节表示，存储空间放大了一倍，并且现在的网络带宽还非常有限，这样会增大网络传输的流量)需要把Unicode编码转为一种“<strong>可变长编码</strong>”的UTF-8。UTF-8在原来Unicode的基础上根据数字大小编码成1-6个字节，常用的英文就是1字节，汉字一般3字节，生僻字4-6字节。</p><p>同时由于英文是1个字节，所以ASCII码是可以当成其中的一部分的，这样的好处就是原来支持ASCII的旧软件可以再UTF-8下继续运行。</p><p>UTF-8 有以下编码规则： </p><ul><li>如果一个字节，最高位（第 8 位）为 0，表示这是一个 ASCII 字符（00 - 7F）。可见，所有 ASCII 编码已经是 UTF-8 了。</li><li>如果一个字节，以 11 开头，连续的 1 的个数暗示这个字符的字节数，例如：110xxxxx 代表它是双字节 UTF-8 字符的首字节。</li><li>如果一个字节，以 10 开始，表示它不是首字节，需要向前查找才能得到当前字符的首字节</li></ul><h3 id="计算机内存的编码转换"><a href="#计算机内存的编码转换" class="headerlink" title="计算机内存的编码转换"></a>计算机内存的编码转换</h3><p>在计算机<strong>内存</strong>中统一使用Unicode编码，当需要保存到<strong>硬盘</strong>或者需要<strong>传输</strong>的时候，就转换为UTF-8编码。</p><p>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;查阅并总结一些常见的字符编码类型，介绍其特点以及之间的区别。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_34745204/article/details/83786775&quot;&gt;字符编码的常用种类介绍&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/slx3320612540/article/details/81251642&quot;&gt;微信公众号回复、接收消息中中文乱码问题的分析及解决&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://zqyy.site/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="探索者" scheme="http://zqyy.site/categories/%E7%AC%94%E8%AE%B0/%E6%8E%A2%E7%B4%A2%E8%80%85/"/>
    
    
      <category term="字符编码" scheme="http://zqyy.site/tags/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Mongo</title>
    <link href="http://zqyy.site/2020/09/23/MongoDB/"/>
    <id>http://zqyy.site/2020/09/23/MongoDB/</id>
    <published>2020-09-23T05:03:42.000Z</published>
    <updated>2021-08-18T12:24:19.396Z</updated>
    
    <content type="html"><![CDATA[<p>介绍Mongo相比传统的关系型数据库具有的优点，然后介绍适合Mongo的应用场景。<br><span id="more"></span></p><h3 id="何谓MongoDB"><a href="#何谓MongoDB" class="headerlink" title="何谓MongoDB"></a>何谓MongoDB</h3><p>MongoDB是一款广受欢迎的文档型数据库，数据以BSON（一种类JSON的二进制形式）的格式存储</p><h3 id="对比传统关系型DB优点"><a href="#对比传统关系型DB优点" class="headerlink" title="对比传统关系型DB优点"></a>对比传统关系型DB优点</h3><p>对比传统的关系型数据库，MongoDB有很多独有的优势，比如：</p><ol><li><strong>schema-free，灵活易用的文档模型</strong></li><li><strong>原生分布式支持带来良好的扩展性，支持海量数据的存储</strong></li><li>强大的索引支持，支持多种索引类型，如TTL、文本、地理位置等等</li><li>JSON 格式存储最接近真实对象模型，对开发者友好，方便快速开发迭代</li></ol><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>游戏、UGC、电商、物联网、直播等，支撑了很多核心的业务数据存储</p><h4 id="UGC"><a href="#UGC" class="headerlink" title="UGC"></a>UGC</h4><p>用户生成内容</p><ul><li><p>数据由用户产生，结构多变</p><p>数据结构可能是非结构化的，传统关系型数据库需要事先定义好表结构，无法适应这种场景，就算可以支持，增删字段也是麻烦的，MongoDB没有表结构</p></li><li><p>海量数据存储</p><p>如今单个应用的数据存储已经可以达到TB，甚至PB级别，MongoDB天然支持分布式部署，通过分片集群，将数据分布到不同分片，实现海量存储</p></li><li><p>需要二级索引，按照多个维度查询展示</p><p>MongoDB支持多种索引类型，可以对各个字段建立二级索引，能够高效的对各个维度进行查询展示</p></li><li><p>性能、可用性、数据安全的一个综合考虑</p><p>多副本保证数据安全，完善的故障恢复机制，灵活的数据一致性读写接口</p></li></ul><h4 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h4><ul><li><p>对复杂结构友好（支持Document，自由模式）</p><p>游戏的迭代速度很快，装备、属性等字段变更非常频繁，且玩家数据存在频繁的联动与刷新，数据结构极其复杂。使用 MongoDB 存储游戏用户信息、装备、积分等时，会直接以内嵌<strong>文档</strong>的形式存储，<strong>无需进行复杂的模式设计</strong>。<br>得益于MongoDB的BSON的文档存储模型，MongoDB具备了<strong>多形性</strong>和<strong>动态性</strong>，多形性表示同一个集合包含不同字段的文档对象，这意味着插入一条数据结构更新后的记录，动态性意味着动态增加、修改字段无需停止数据库服务。这种no-schema模式大大免去了变更表结构的痛苦，大幅度缩短游戏版本的迭代周期。</p></li><li><p>高性能（支持高可用）</p><p>延迟高于几百毫秒之后玩家体验会急剧降低；且游戏业务的用户量存在明显的高低峰期。高峰期对数据库的并发能力和QPS有较高要求。</p></li><li><p>可扩展性（支持Sharding，可扩展）</p><p>随着游戏的发展，玩家数量越来越多，或者在某些运营活动的短时间内，用户量暴增。MongoDB本身支持副本集的纵向扩展，通过多个节点的方式，大大提升集群的读能力，通过分片集群的横向扩展，将数据通过片键存储在多台物理机上，实现存储容量线性快速扩展的目的</p></li></ul><h3 id="什么样的场景适合用MongoDB"><a href="#什么样的场景适合用MongoDB" class="headerlink" title="什么样的场景适合用MongoDB"></a>什么样的场景适合用MongoDB</h3><ol><li><p>业务不是非得用到关系型数据库的一些特性（如事务、join等），大多数情况都可以选择MongoDB，当然MongoDB4.0也支持事务了</p></li><li><p>业务没有固定的数据模型，数据格式变动频繁</p></li><li><p>需要支持海量数据（TB、PB级别）存储</p></li><li><p>对性能和延时有较高要求，例如ms级别</p></li><li><p>游戏一般会考虑Mysql或tcaplus或MongoDB的其中一种，选用MongoDB的大都是代理类业务。一般还是用前两个多</p><blockquote><p>游戏数据库（TcaplusDB）是腾讯自研的，专为游戏设计的<strong>分布式非关系型</strong>数据存储服务。</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍Mongo相比传统的关系型数据库具有的优点，然后介绍适合Mongo的应用场景。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="http://zqyy.site/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="db" scheme="http://zqyy.site/categories/%E5%90%8E%E7%AB%AF/db/"/>
    
    
      <category term="Mongo" scheme="http://zqyy.site/tags/Mongo/"/>
    
  </entry>
  
  <entry>
    <title>浏览器页面缩放原理引发的思考</title>
    <link href="http://zqyy.site/2020/04/04/%E4%BB%8Ectrl%E6%BB%9A%E5%8A%A8%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://zqyy.site/2020/04/04/从ctrl滚动实现原理引发的思考/</id>
    <published>2020-04-04T15:14:24.000Z</published>
    <updated>2021-08-18T12:00:55.188Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器按住ctrl和鼠标滚轮缩放原理。</p><span id="more"></span><hr><h2 id="搜一搜万能的互联网怎么说的"><a href="#搜一搜万能的互联网怎么说的" class="headerlink" title="搜一搜万能的互联网怎么说的"></a>搜一搜万能的互联网怎么说的</h2><h3 id="第一种说法-改变html宽高"><a href="#第一种说法-改变html宽高" class="headerlink" title="第一种说法(改变html宽高)"></a>第一种说法(改变html宽高)</h3><blockquote><p>在没有确定html的width和height为px情况下，是<strong>通过缩放html标签的高度和宽度</strong>来实现的。道理不难理解，html作为参照物，当你想放大的时候，其实浏览器执行的是缩小html的宽和高。为html设定一个所谓的绝对宽度和高，即px为单位（虽然这个也并非绝对单位），可以清晰的看到html画布的放大和缩小。<br>但是在设置了HTML的w和h后，其缩放机理还没有摸透，猜测可能是改变了document的宽和高。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//通过一个媒体查询例子看看</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1000px</span>)&#123;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1001px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">2000px</span>)&#123;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果发现ctrl滚轮放大 以及 改变整个浏览器窗口使其缩小的时候，都会变成红色，通过开发者工具的审查元素也能发现html的width的确变小了</p><h3 id="第二种说法-改变逻辑尺寸"><a href="#第二种说法-改变逻辑尺寸" class="headerlink" title="第二种说法(改变逻辑尺寸)"></a>第二种说法(改变逻辑尺寸)</h3><p>假定浏览器初始值是100px，我们在屏幕上看到的是10cm，那么它就是将10cm的物理长度划分成了100份，每一份是1px。</p><p>当进行了网页放大，比如视觉上放大了一倍，那么原来代表1px的物理长度区域，只能代表0.5px，也就是说现在10cm的长度，只能表示50px。也就是说，物理上没有变化，但是逻辑上，尺寸缩小了一倍。</p><p>比如你屏幕分辨率本来是1000px，网页放大一倍以后，逻辑尺寸就变成了500px。</p><h3 id="第三种说法-改变zoom值"><a href="#第三种说法-改变zoom值" class="headerlink" title="第三种说法(改变zoom值)"></a>第三种说法(改变zoom值)</h3><blockquote><p>CSS 有 <code>zoom</code> 属性，可以控制内容的缩放。浏览器的缩放大概实现方式类似吧。至于错位问题，大部分浏览器对字体都有默认的最小值，当小于最小值后，文字并不会被缩放，导致了内容的折行，从而把布局撑开。</p></blockquote><p>这个说法虽然没有和我一开始的想法分辨率挂钩，但是zoom这个属性我也去试了一下</p><p>随便挑了一个页面调整页面内容100%，然后滚动放大到125%的时候，做了一个视窗截图。和我在100%的情况下对<html>使用zoom:125%，在一些网站上是一模一样的，在一些网站上会出现错位问题，稍微错位了一点，整体效果接近，这跟原文的说法一致。但是这并不能说明浏览器的ctrl+滚了的原理是这个，只能说可以这么达到实现的效果吧。</html></p><h3 id="推荐好文以及详细解读浏览器缩放原理"><a href="#推荐好文以及详细解读浏览器缩放原理" class="headerlink" title="推荐好文以及详细解读浏览器缩放原理"></a>推荐好文以及详细解读浏览器缩放原理</h3><p><a href="https://www.quirksmode.org/mobile/viewports.html">英文原文</a></p><p><a href="https://www.ianran.cn/?p=58">中文翻译</a></p><h2 id="顺便谈下zoom这个属性"><a href="#顺便谈下zoom这个属性" class="headerlink" title="顺便谈下zoom这个属性"></a>顺便谈下zoom这个属性</h2><p>原本是IE专属的，用来清除浮动、清除margin重叠等。如今除了FF不支持，-webkit内核的浏览器例如Chrome和移动端浏览器是支持的，但是用法不一样</p><h3 id="在非IE下的作用"><a href="#在非IE下的作用" class="headerlink" title="在非IE下的作用"></a>在非IE下的作用</h3><p>是放大两倍，<code>zoom:1|2</code>除了宽高边距也包括字体，但是这个属性是一个不标准的css属性，因此一般不用zoom来实现缩放效果，现在要放大或者缩小直接用css3的transform属性，transform才是正统标准，当然IE678依然不支持，这点就可以用zoom弥补了，刚好zoom可以支持IE678</p><h3 id="在IE下的作用"><a href="#在IE下的作用" class="headerlink" title="在IE下的作用"></a>在IE下的作用</h3><p>除了缩放，更多的是利用他可以触发ie的hasLayout，用于清除浮动、清除margin的重叠</p><ol><li><p>清除浮动常用</p><p><code>overflow:hidden;</code></p><p> <code>zoom:1;</code></p></li><li><p>解决子元素浮动时候父元素不随着自动扩大的问题（margin重叠也是），一般要在浮动元素的父元素加上<code>overflow:auto；</code> <code>zoom:1;</code></p></li></ol><h3 id="和transform-scale的差异"><a href="#和transform-scale的差异" class="headerlink" title="和transform:scale的差异"></a>和transform:scale的差异</h3><ol><li>zoom的缩放是相对于左上角的；而scale默认是居中缩放；</li><li>zoom的缩放改变了元素占据的空间大小，引起重绘回流；而scale的缩放占据的原始尺寸不变，布局不变，只会重绘不会回流</li><li>zoom和scale对元素的渲染<a href="https://www.aliyun.com/">计算</a>方法可能有差异，效果上看zoom缩放的图片会更加清晰，scale比较模糊</li><li>对文字的缩放规则不一致。zoom缩放依然受限于最小12像素中文大小限制；而scale就是纯粹的对图形进行比例控制，文字50%原来尺寸。</li></ol><h2 id="缩放在不同浏览器下获取屏幕分辨率情况差异"><a href="#缩放在不同浏览器下获取屏幕分辨率情况差异" class="headerlink" title="缩放在不同浏览器下获取屏幕分辨率情况差异"></a>缩放在不同浏览器下获取屏幕分辨率情况差异</h2><p>ctrl+-进行缩放的时候的时候，不同浏览器获取的屏幕分辨率情况不一样。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//物理分辨率，即显示器的当前分辨率：window.screen.width</span><br><span class="line"></span><br><span class="line">Chrome下，缩放不影响：</span><br><span class="line">    window.screen.availWidth == window.screen.width == 显示器宽度</span><br><span class="line"></span><br><span class="line">火狐: 缩放是影响其值的：</span><br><span class="line">    window.screen.availWidth == window.screen.width == (显示器宽度 / 缩放比例)</span><br><span class="line">    </span><br><span class="line">IE: 缩放是影响其值的：</span><br><span class="line">    window.screen.availWidth == window.screen.width == (显示器主显示器宽度 / 缩放比例)</span><br><span class="line"> PS: 主显示器是指，当前电脑连接多个显示器，任务栏所在的显示器为主显示器。</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//浏览器可见区域(视窗)分辨率：document.body.clientWidth</span><br><span class="line">Chrome, FF, IE: document.body.clientWidth == (浏览器可视区域宽度 / 缩放比例)</span><br></pre></td></tr></table></figure><h2 id="如何检查浏览器的缩放状态-兼容各种浏览器"><a href="#如何检查浏览器的缩放状态-兼容各种浏览器" class="headerlink" title="如何检查浏览器的缩放状态(兼容各种浏览器)"></a>如何检查浏览器的缩放状态(兼容各种浏览器)</h2><p>PS:这里缩放不是指浏览器大小的缩放，而是指浏览器网页内容的百分比缩放</p><ol><li>不管IE6，因为 IE6 只能对文本进行缩放。</li><li>window.devicePixelRatio 目前Firefox、chrome等都得到了很好的支持。<br> IE 的处理方法了，IE 提供了 window.screen.deviceXDPI 和 window.screen.logicalXDPI 两个属性，</li><li>对于以上两种都不支持的浏览器，还可以利用window.outerWidth 和 window.innerWidth 这两个属性。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">detectZoom</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ratio = <span class="number">0</span>,</span><br><span class="line">    screen = <span class="built_in">window</span>.screen,</span><br><span class="line">    ua = navigator.userAgent.toLowerCase();</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">window</span>.devicePixelRatio !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      ratio = <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (~ua.indexOf(<span class="string">&#x27;msie&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (screen.deviceXDPI &amp;&amp; screen.logicalXDPI) &#123;</span><br><span class="line">      ratio = screen.deviceXDPI / screen.logicalXDPI;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.outerWidth !== <span class="literal">undefined</span> &amp;&amp; <span class="built_in">window</span>.innerWidth !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    ratio = <span class="built_in">window</span>.outerWidth / <span class="built_in">window</span>.innerWidth;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">if</span> (ratio)&#123;</span><br><span class="line">    ratio = <span class="built_in">Math</span>.round(ratio * <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">return</span> ratio;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="如何禁用浏览器的缩放"><a href="#如何禁用浏览器的缩放" class="headerlink" title="如何禁用浏览器的缩放"></a>如何禁用浏览器的缩放</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;javascript&quot;</span>&gt;</span><br><span class="line">        <span class="keyword">var</span> scrollFunc = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            e = e || <span class="built_in">window</span>.event;</span><br><span class="line">            <span class="keyword">if</span> (e.wheelDelta &amp;&amp; event.ctrlKey) &#123; <span class="comment">//IE/Opera/Chrome</span></span><br><span class="line">                event.returnValue = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.detail) &#123; <span class="comment">//Firefox</span></span><br><span class="line">                event.returnValue = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*注册事件*/</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.addEventListener) &#123;</span><br><span class="line">            <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMMouseScroll&#x27;</span>, scrollFunc, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="comment">//W3C</span></span><br><span class="line">        <span class="built_in">window</span>.onmousewheel = <span class="built_in">document</span>.onmousewheel = scrollFunc;                           <span class="comment">//IE/Opera/Chrome/Safari</span></span><br><span class="line">    &lt;/script&gt;  </span><br></pre></td></tr></table></figure><p>window.outerWidth获取浏览器窗口外部的宽度。 它表示整个浏览器窗口的宽度，包括边栏<br>window.innerWidth获取浏览器可视区域的宽度，也就是页面的宽度</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浏览器按住ctrl和鼠标滚轮缩放原理。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zqyy.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="浏览器" scheme="http://zqyy.site/categories/%E5%89%8D%E7%AB%AF/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="浏览器" scheme="http://zqyy.site/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Webpack拆包</title>
    <link href="http://zqyy.site/2020/03/15/webpack%E6%8B%86%E5%8C%85/"/>
    <id>http://zqyy.site/2020/03/15/webpack拆包/</id>
    <published>2020-03-15T08:44:28.000Z</published>
    <updated>2021-08-18T12:31:19.334Z</updated>
    
    <content type="html"><![CDATA[<p>webpack打包文件vendor体积大怎么解决一直以来都是前端优化的一个关注问题，今天翻资料的时候发现webpack有一个<strong>拆包</strong>的功能也可以解决这个问题。<br><span id="more"></span></p><hr><h2 id="一、打包文件越来越大导致的问题"><a href="#一、打包文件越来越大导致的问题" class="headerlink" title="一、打包文件越来越大导致的问题"></a>一、打包文件越来越大导致的问题</h2><ul><li><strong>首屏加载变慢</strong>。前端框架的使用导致js文件加载完成之前只能显示空白或者少量内容。SSR服务端渲染可以改善这个现象，但是代价挺大的。</li><li>页面迭代导致浏览器<strong>缓存不可用</strong>。</li><li>公用库和框架<strong>无法跨页面共享</strong>。并非所有都是单页面应用，多页面应用的页面之间经常会有公用库和框架，但是对于这些，每个页面都会<strong>重复打包</strong>。</li></ul><p>虽然引用的UI库例如Element—UI或者Antd都有提供按需加载的功能，可以有效减少打包文件体积，但是如果项目本身庞大需求组件多，还是会很大的。</p><h2 id="二、用CDN外链引入"><a href="#二、用CDN外链引入" class="headerlink" title="二、用CDN外链引入"></a>二、用CDN外链引入</h2><ol><li>放到cdn上，在index.html外链引入</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.5/lodash.min.js&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>app.js文件import的还是要的，不然怎么注入全局</p></li><li><p>修改webpack的externals</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">externals: &#123;</span><br><span class="line">  lodash: &#x27;_&#x27;,</span><br><span class="line">  highcharts: &#x27;Highcharts&#x27;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//key是文件名，就是install那个，value是这个模块抛出的变量</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="三、使用CommonsChunkPlugin拆包"><a href="#三、使用CommonsChunkPlugin拆包" class="headerlink" title="三、使用CommonsChunkPlugin拆包"></a>三、使用CommonsChunkPlugin拆包</h2><p>每使用一次该插件，会生成一个单独的文件(chunk，译作切片），这个文件中包含了多个入口chunk中的公共模块</p><h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><p>name：新的切片的名称，字符串或者字符串数组，可以是已经存在的chunk的名字</p><p>chunks。需要检查、提取公用模块的chunk。</p><p>minChunks。接受一个大于等于2的数组，表示的是至少有n个chunk中公用了这个模块，才会提取出来单独打包，也可以接受一个函数，函数接受两个参数，module和count，返回值为true的模块会被提取出来</p><p>fileName。文件命名<strong>模板</strong>，可以使用[name]、[hash]、[id]之类的<strong>变量占位符</strong>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">  name: &#x27;charts&#x27;,</span><br><span class="line">  chunks: [&#x27;vendor&#x27;],</span><br><span class="line">  minChunks: module =&gt; module.resource.indexOf(&#x27;highcharts&#x27;) &gt; <span class="number">-1</span></span><br><span class="line">&#125;),</span><br><span class="line"> </span><br><span class="line">new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">  name: &#x27;ui&#x27;,</span><br><span class="line">  chunks: [&#x27;vendor&#x27;],</span><br><span class="line">  minChunks: module =&gt; module.resource.indexOf(&#x27;element-ui&#x27;) &gt; <span class="number">-1</span></span><br><span class="line">&#125;)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>将公用的模块提取出来单独打包</p><ol><li>不会影响正常加载</li><li>有效利用浏览器缓存</li><li>可以跨页面公用</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;webpack打包文件vendor体积大怎么解决一直以来都是前端优化的一个关注问题，今天翻资料的时候发现webpack有一个&lt;strong&gt;拆包&lt;/strong&gt;的功能也可以解决这个问题。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zqyy.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Webpack" scheme="http://zqyy.site/categories/%E5%89%8D%E7%AB%AF/Webpack/"/>
    
    
      <category term="Webpack" scheme="http://zqyy.site/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>crossorigin和integrity</title>
    <link href="http://zqyy.site/2020/03/13/crossorigin%E5%92%8Cintegrity/"/>
    <id>http://zqyy.site/2020/03/13/crossorigin和integrity/</id>
    <published>2020-03-13T15:37:35.000Z</published>
    <updated>2021-08-18T12:15:27.460Z</updated>
    
    <content type="html"><![CDATA[<p>一次偶然不小心点到查看github某个网址的源代码时，发现了以前从未见过的html属性crossorigin和integrity<br><span id="more"></span></p><h1 id="一、view-source协议"><a href="#一、view-source协议" class="headerlink" title="一、view-source协议"></a>一、view-source协议</h1><p>view-source是一种协议，早期基本上每个浏览器都支持这个协议。后来Microsoft考虑安全性，IE就不再支持此协议。但是这个方法在FireFox和Chrome浏览器都还可以使用。 如果要在IE下查看源代码,只能使用查看中的”查看源代码”命令.。FF、Chrome在在浏览器地址栏中输入<code>view-source: URL</code></p><h1 id="二、link标签的crossorigin、integrity属性"><a href="#二、link标签的crossorigin、integrity属性" class="headerlink" title="二、link标签的crossorigin、integrity属性"></a>二、link标签的crossorigin、integrity属性</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="attribute">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> <span class="attribute">media</span>=<span class="string">&quot;all&quot;</span> <span class="attribute">integrity</span>=<span class="string">&quot;sha512-5Bs4ERl99/u2AUfpOZF2F0cdfNby7+Vd9teUshXUBPo5CjwECR7IAEf+weI/eCk5tF7K1h3O8hd8k0+P/HePeg==&quot;</span> <span class="attribute">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attribute">href</span>=<span class="string">&quot;https://github.githubassets.com/assets/frameworks-e41b3811197df7fbb60147e939917617.css&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>那么这两个属性意味着什么呢，其实之前没有注意到，有些网站使用CDN资源的时候，都会在\&lt;link>\&lt;script>\&lt;img>属性带上这两个属性。</p><h2 id="crossorigin"><a href="#crossorigin" class="headerlink" title="crossorigin"></a>crossorigin</h2><h3 id="两个属性值"><a href="#两个属性值" class="headerlink" title="两个属性值"></a>两个属性值</h3><p>这个属性指定了加载资源的时候是否使用CORS。有两个值</p><ul><li>anonymous：发起一个跨域请求，请求头带上Origin，但是不会发送任何认证信息(不发送cookie，X.509证书和HTTP基本的认证信息)。如果服务器没有设置Access-Control-Allow-Origin：xxx。这个资源限制使用</li><li>use-credentials。发起一个跨域请求，带上认证信息，如果服务器不设置 Access-Control-Allow-Origin:xxx限制使用</li><li>不设置这个属性，资源不会使用CORS加载(也就是不发送Origin),如果设置非法值，视为使用了anonymous</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>引入跨域的脚本，如果这个脚本有错误，因为浏览器的限制（根本原因是协议的规定），是拿不到错误信息的。就算本地尝试使用 <code>window.onerror</code> 去记录脚本的错误时，跨域脚本的错误只会返回 <code>Script error</code>。</p><p>HTML5 新的规定，是可以允许本地获取到跨域脚本的错误信息，但有两个条件：一是跨域脚本的服务器必须设置 <code>Access-Controll-Allow-Origin</code>允许当前域名可以获取错误信息，二是这个 script 标签也必须有crossorigin 属性。</p><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>假如允许本地获取到跨域脚本的错误信息那么，那么我们就可以通过报错信息的不一致，推断出当前访问的用户的使用痕迹；进而可以”精准”推送相关的钓鱼网站给他。</p><p>————————————————</p><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h2 id="integrity与SRI"><a href="#integrity与SRI" class="headerlink" title="integrity与SRI"></a>integrity与SRI</h2><h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><blockquote><p>SRI 是 Subresource Integrity 的缩写，直接翻译就是，子资源完整性</p></blockquote><p>Web 性能优化中很重要的一点是让请求提前结束，让可缓存的资源走 CDN 是最通用的做法。CDN 服务提供商通过分布在各地的节点，让用户从最近的节点加载内容，大幅提升速度。但是 CDN 的安全性一直是一个风险点：对于网站主来说，让请求从第三方服务器经过，由第三方响应，安全方面肯定不如自己服务器可控。</p><p>我们知道 CSP的白名单机制可以减小 XSS 风险。但是针对 CDN 内容被篡改而导致的 XSS，CSP 并不能防范，因为网站所使用的 CDN 域名，肯定在 CSP 白名单之中。这时候，SRI 就应运而生了。它通过对资源进行摘要签名，来保证外链资源的完整性</p><p>目前支持 SRI 的浏览器有Chrome和FF</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在link，script，img等标签使用integrity属性</p><p>这个属性会启用 SRI 策略，浏览器会对资源进行 CORS 校验，这就要求被请求的资源必须同域，或者配置了 Access-Control-Allow-Origin 响应头。</p><p>浏览器到资源内容之后，会使用 <code>integrity</code> 所指定的签名算法计算结果，并与 <code>integrity</code> 提供的摘要签名比对，如果二者不一致，就不会执行这个资源。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>SRI 的作用是保证页面引入的第三方资源的完整性。在第三方 CDN 服务被入侵或回源被运营商劫持、文件内容被加入恶意代码时，网站如果启用了 SRI 策略，那么在支持 SRI 的浏览器下，被篡改的文件无法执行。</p><p>虽然HTTPS 也可以确保传输过程中的数据完整性，但是对于 CDN 服务器被入侵或 HTTP 回源被劫持造成的文件篡改，HTTPS 无济于事，这时 SRI 就可以派上用场，作为补充。</p><p>但是，如果网站以及 CDN 都没有使用 HTTPS，运营商可以将外链资源及 HTML 页面本身一起劫持，并将资源内容和页面中的摘要签名同步修改，让 SRI 彻底失效。</p><h3 id="缺陷-1"><a href="#缺陷-1" class="headerlink" title="缺陷"></a>缺陷</h3><p>大部分运营商劫持，都是为了插入广告代码。如果网站启用了 SRI，会导致篡改后的整个文件无法执行，这很可能让页面变得完全不可用。</p><p>当然，为了提高可用性，也可以增加 fallback 处理。例如，在 CDN 资源被篡改而无法加载时，转为使用本站资源：例如cdn引入JQ库，判断是否引入成功，如果没有就使用自己的资源</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一次偶然不小心点到查看github某个网址的源代码时，发现了以前从未见过的html属性crossorigin和integrity&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zqyy.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML" scheme="http://zqyy.site/categories/%E5%89%8D%E7%AB%AF/HTML/"/>
    
    
      <category term="HTML" scheme="http://zqyy.site/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>z-index引发的思考</title>
    <link href="http://zqyy.site/2020/02/27/z-index%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://zqyy.site/2020/02/27/z-index引发的思考/</id>
    <published>2020-02-26T16:16:32.000Z</published>
    <updated>2021-08-18T12:31:29.997Z</updated>
    
    <content type="html"><![CDATA[<p>故事的是从一个小小的z-index开始的。<br>今天突然看到一个问题。z-index 默认值是啥？以前的确没关注过这个，默认值难道不是auto，既然这么问那肯定有鬼了，盲猜又是IE的锅。</p><p>搜了一下得到答案：IE默认值是0，而FF是auto。那么这个问题算是答完了，但是隐藏在背后的知识点真的只有这些吗？于是乎引出了下面的名词<br><span id="more"></span></p><h2 id="一个小例子"><a href="#一个小例子" class="headerlink" title="一个小例子"></a>一个小例子</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inline-block&quot;</span>&gt;</span>#divA display:inline-block<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span> #divB float:left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS就不写了，看class名字表达意思。注意在这里是inline-block的div先写在写float的div。最后结论是，不管这两个div顺序怎样，永远是inline-block的盒子在上(用背景色区分下就能看到了)。根究原因的话就引出了本文主角之一的<strong>层叠等级</strong></p><h2 id="层叠等级-stacking-level"><a href="#层叠等级-stacking-level" class="headerlink" title="层叠等级(stacking level)"></a>层叠等级(stacking level)</h2><p><img src="/2020/02/27/z-index%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/层叠等级.png" alt="image"></p><p>所以display：inline-block会一直在float的上面。但是如果两个div都加一个opacity：0.9，那么结果变成，后面的div永远在前面的div上面</p><h2 id="层叠上下文-stacking-context"><a href="#层叠上下文-stacking-context" class="headerlink" title="层叠上下文(stacking context)"></a>层叠上下文(stacking context)</h2><p>层叠上下文的元素层叠顺序是看z-index。但是这个z-index只在父级层叠上下文有意义。如果父级的z-index小于一个同级的，那么这个父级的子元素z-index设置再大也没用。</p><p>触发层叠上下文的常用的方式有</p><ol><li>根元素 (HTML),</li><li>绝对相对固定定位</li><li>flex的item</li><li>opacity</li><li>transform </li><li>filter</li><li>will-change</li><li>mix-blend-mode</li><li>isolation</li></ol><p>值得一提的是，上面这些不取默认值的才算</p><p>值得二提的是，4-7正好是触发硬件加速的四种css</p><p>值得三提的是，8-9正好的触发混合模式的三种方式之二？这么巧有故事吧</p><h2 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h2><p>顺便谈下混合模式，毕竟这和z-index有关系。</p><p>z-index解决的是层叠(元素覆盖)问题，而CSS混合模式解决的是元素覆盖部分如何混合(如何表现)的问题 </p><p>常用的三种css属性</p><ul><li>mix-blend-mode<br>元素内容和元素背景的混合<br><a href="https://www.zhangxinxu.com/study/201505/css3-css4-mix-blend-mode.html">体验效果戳这里</a></li><li>background-blend-mode<br>背景和背景的混合<br><a href="https://www.zhangxinxu.com/study/201505/css3-css4-background-blend-mode.html">体验效果戳这里</a></li><li>isolation<br>希望混合模式只影响某一个或一些指定的元素用isolation: isolate。默认值是auto</li></ul><p>其实只要可以创建层叠上下文的都可以起到阻断混合模式mix-blend-mode的效果，怎么创建层叠上下文看上面。特殊的是，background-blend-mode不会受影响，本来就不会影响其他元素</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;故事的是从一个小小的z-index开始的。&lt;br&gt;今天突然看到一个问题。z-index 默认值是啥？以前的确没关注过这个，默认值难道不是auto，既然这么问那肯定有鬼了，盲猜又是IE的锅。&lt;/p&gt;
&lt;p&gt;搜了一下得到答案：IE默认值是0，而FF是auto。那么这个问题算是答完了，但是隐藏在背后的知识点真的只有这些吗？于是乎引出了下面的名词&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zqyy.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://zqyy.site/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
      <category term="CSS" scheme="http://zqyy.site/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>多角度看待HTTPS</title>
    <link href="http://zqyy.site/2020/02/26/%E5%A4%9A%E8%A7%92%E5%BA%A6%E7%9C%8B%E5%BE%85HTTPS/"/>
    <id>http://zqyy.site/2020/02/26/多角度看待HTTPS/</id>
    <published>2020-02-26T07:00:30.000Z</published>
    <updated>2021-08-18T12:03:18.588Z</updated>
    
    <content type="html"><![CDATA[<p>本文从HTTPS的作用、缺点、与HTTP的区别、加密算法、数字证书、SSL/TLS等角度介绍HTTPS的知识点<br> <span id="more"></span></p><h1 id="一、HTTPS介绍"><a href="#一、HTTPS介绍" class="headerlink" title="一、HTTPS介绍"></a>一、HTTPS介绍</h1><h2 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h2><ul><li>内容加密 保证数据传输的安全；</li><li>身份验证 确认网站的真实性；</li><li>数据完整性 防止内容被第三方冒充或者篡改<h2 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2.缺点"></a>2.缺点</h2></li><li>需要进行非对称的加解密，且需要三次握手。首次连接比较慢</li><li>出于安全考虑，浏览器默认不会在本地对HTTPS缓存。Firefox默认只在内存中缓存HTTPS。但是，只要头命令中有Cache-Control: Public，缓存就会被写到硬盘上。IE只要http头允许就可以缓存https内容</li></ul><h2 id="3-和HTTP的区别"><a href="#3-和HTTP的区别" class="headerlink" title="3.和HTTP的区别"></a>3.和HTTP的区别</h2><ul><li>HTTP明文传输，而后者ssl加密，密文传输</li><li>端口不一样，80and443</li><li>http的连接是无状态的(不验证通信双方)，Https可进行身份认证</li><li>https要到CA申请证书</li></ul><h2 id="4-HTTP无状态无连接"><a href="#4-HTTP无状态无连接" class="headerlink" title="4.HTTP无状态无连接"></a>4.HTTP无状态无连接</h2><ul><li><p>无状态的意思是，协议没有记忆能力，对同一个url的请求没有上下文关系，每个请求都是独立的。后来出现了cookie</p></li><li><p>无连接的含义是限制每次建立连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可尽快释放资源。后来网页复杂了，嵌入图片什么的，每次访问都要建立tcp连接太低效，就出现了keep-alive</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/2223007-8fdca151b9f7c456?imageMogr2/auto-orient/strip|imageView2/2/w/640/format/webp" alt=""></p><h1 id="二、相关技术"><a href="#二、相关技术" class="headerlink" title="二、相关技术"></a>二、相关技术</h1><h2 id="1-对称加密"><a href="#1-对称加密" class="headerlink" title="1. 对称加密"></a>1. 对称加密</h2><p>常见的有DES、AES、RC4</p><h2 id="2-非对称加密"><a href="#2-非对称加密" class="headerlink" title="2. 非对称加密"></a>2. 非对称加密</h2><p> 需要公钥私钥。常见算法有RSA。加密内容的长度有限制，不能超过公钥长度。</p><h2 id="3-摘要算法"><a href="#3-摘要算法" class="headerlink" title="3. 摘要算法"></a>3. 摘要算法</h2><p> 单向散列(hash)算法，常见MD5</p><h2 id="4-数字签名"><a href="#4-数字签名" class="headerlink" title="4. 数字签名"></a>4. 数字签名</h2><p>非对称加密和数字摘要的结合应用。明文 ——&gt; hash算法 ——&gt; 摘要 ——&gt; 私钥加密 ——&gt; 数字签名</p><blockquote><p>数字签名只能验证数据的完整性和身份验证，数据本身是否加密不属于数字签名的控制范围</p></blockquote><h2 id="5-数字证书"><a href="#5-数字证书" class="headerlink" title="5. 数字证书"></a>5. 数字证书</h2><h3 id="1）-数字证书的作用"><a href="#1）-数字证书的作用" class="headerlink" title="1） 数字证书的作用"></a>1） 数字证书的作用</h3><p>对请求方来说，要用公钥解密发送方发过来的证书里面的摘要，这个公钥怎么保证就是对方的呢？就要借助权威的值得信赖的第三方机构CA(证书颁发机构)</p><h3 id="2）-颁发证书过程"><a href="#2）-颁发证书过程" class="headerlink" title="2） 颁发证书过程"></a>2） 颁发证书过程</h3><p>用户首先产生自己的密钥对，并将公钥及部分个人身份信息传送给认证中心。认证中心在核实身份后，将执行一些必要的步骤，以确信请求确实由用户发送而来，然后认证中心将发给用户一个数字证书。</p><h3 id="3）-证书包含内容"><a href="#3）-证书包含内容" class="headerlink" title="3） 证书包含内容"></a>3） 证书包含内容</h3><ul><li>证书颁发机构的名称</li><li>证书本身的数字签名</li><li>证书持有者公钥</li><li>证书签名用到的Hash算法<h3 id="4）怎么验证证书有效"><a href="#4）怎么验证证书有效" class="headerlink" title="4）怎么验证证书有效"></a>4）怎么验证证书有效</h3>前提：浏览器默认都会内置CA根证书，根证书包含了CA的公钥</li></ul><ol><li>验证证书颁发的机构是否存在，浏览器不认识，直接认为是危险证书</li><li>存在的话根据CA名，找到对应内置的CA根证书。用证书里面的公钥，对摘要解密，不行表现危险证书</li><li>解密得到摘要A，然后再根据证书提供的的HASH算法计算出证书的摘要B，对比A与B，若相等则正常，否则就是被篡改过的。</li><li>证书可在其过期前被手动吊销，目前较新的浏览器如Chrome、Firefox、Opera和Internet Explorer都实现了在线证书状态协议（OCSP）以避免这种情况：浏览器将目标网站提供的证书的序列号通过OCSP发送给证书颁发机构，后者会告诉浏览器证书是否还是有效的。</li></ol><h1 id="三、SSL与TLS"><a href="#三、SSL与TLS" class="headerlink" title="三、SSL与TLS"></a>三、SSL与TLS</h1><p>TLS建立在SSL 3.0协议规范之上，分为记录协议和握手协议</p><h2 id="TLS比SSL优势"><a href="#TLS比SSL优势" class="headerlink" title="TLS比SSL优势"></a>TLS比SSL优势</h2><ol><li>消息认证使用密钥散列法更安全：TLS使用“消息认证代码的密钥散列法”（HMAC），SSL3.0使用的是键控消息认证（MAC），HMAC比MAC功能更安全。</li><li>伪随机功能增强（PRF）：PRF生成密钥数据(那三个随机数)。在TLS中，PRF使用两种散列算法保证其安全性。</li><li>已完成消息验证改进。TLS将此已完成消息基于PRF和HMAC值之上，</li><li>一致证书处理。与SSLv3.0不同，TLS试图指定必须在TLS之间实现交换的证书类型。</li></ol><h2 id="握手过程"><a href="#握手过程" class="headerlink" title="握手过程"></a>握手过程</h2><p><img src="https://upload-images.jianshu.io/upload_images/2223007-7989d1139ca847c9?imageMogr2/auto-orient/strip|imageView2/2/w/640/format/webp" alt=""></p><h2 id="恢复会话"><a href="#恢复会话" class="headerlink" title="恢复会话"></a>恢复会话</h2><ol><li><p>session ID。每一次对话都有一个编号。如果对话中断，下次重连的时候，只要客户端给出这个编号，且服务器有这个编号的记录，双方就可以重新使用已有的“对话密钥”，而不必重新生成一把。</p><blockquote><p>session ID是目前所有浏览器都支持的方法，缺点在于session ID往往只保留在一台服务器上。所以，如果客户端的请求发送到另一台服务器，就无法恢复对话。</p></blockquote></li><li><p>session ticket。 上一次对话中发送过来的session ticket。这个session ticket是加密的，只有服务器才能解密，包含了对话密钥和加密方法。恢复会话的时候。当服务器收到session ticket以后，如果可以解密，就不必重新生成对话密钥了。</p><blockquote><p>目前只有Firefox和Chrome浏览器支持。</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文从HTTPS的作用、缺点、与HTTP的区别、加密算法、数字证书、SSL/TLS等角度介绍HTTPS的知识点&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机" scheme="http://zqyy.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="网络" scheme="http://zqyy.site/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="HTTP" scheme="http://zqyy.site/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>预请求</title>
    <link href="http://zqyy.site/2019/09/16/%E9%A2%84%E8%AF%B7%E6%B1%82/"/>
    <id>http://zqyy.site/2019/09/16/预请求/</id>
    <published>2019-09-16T13:59:13.000Z</published>
    <updated>2021-08-18T12:33:41.356Z</updated>
    
    <content type="html"><![CDATA[<p>预请求的应用场景，原理，出现的前置条件。<br><span id="more"></span></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>js发送一次ajax请求时,在浏览器那边却会查询到两次请求,第一次的Request Method参数是OPTIONS,还有一次就是我们真正的请求,比如get或是post请求方式</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>这是浏览器对复杂跨域请求的一种处理方式,在真正发送请求之前,会先进行一次预请求,就是我们刚刚说到的参数为OPTIONS的第一次请求,他的作用是用于试探服务器响应是否正确,即是否能接受真正的请求,如果在options请求之后获取到的响应是拒绝性质的,例如500等http状态,那么它就会停止第二次的真正请求的访问</p><h3 id="出现预请求的情况"><a href="#出现预请求的情况" class="headerlink" title="出现预请求的情况"></a>出现预请求的情况</h3><p>致说明一下,有三种方式会导致这种现象:</p><ol><li>请求的方法不是GET/HEAD/POST</li><li>请求虽然是POST，但是Content-Type的类型除了下面三种application/x-www-form-urlencoded, multipart/form-data, 或text/plain</li><li>请求设置了自定义的header字段</li><li>XMLHttpRequestUpload 对象注册了任何事件监听器</li><li>请求中使用了ReadableStream对象</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;预请求的应用场景，原理，出现的前置条件。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机" scheme="http://zqyy.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="Http" scheme="http://zqyy.site/tags/Http/"/>
    
  </entry>
  
  <entry>
    <title>浏览器缓存</title>
    <link href="http://zqyy.site/2019/09/06/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/"/>
    <id>http://zqyy.site/2019/09/06/浏览器缓存/</id>
    <published>2019-09-06T13:02:30.000Z</published>
    <updated>2021-08-18T12:18:56.507Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器缓存是一个很重要的知识点，下面从缓存的优先级、作用、强缓存与协商缓存的特性这几个角度介绍，后续考虑补充说明。<br><span id="more"></span></p><h3 id="缓存的优先级"><a href="#缓存的优先级" class="headerlink" title="缓存的优先级"></a>缓存的优先级</h3><p><img src="/2019/09/06/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/11.png" alt="image"></p><h3 id="缓存的作用："><a href="#缓存的作用：" class="headerlink" title="缓存的作用："></a>缓存的作用：</h3><ol><li>减少延迟(页面打开的速度)。</li><li>降低服务器负载(先取缓存，无缓存在请求服务器，有效降低服务器的负担)。</li><li>保证稳定性(有个笑话是手机抢购时为了保证服务器的稳定性，在前端写个随机数限制百分之二十的人发送数据到后台，这也侧面说明了缓存对于稳定性的作用)。</li></ol><h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><p>指定服务器返回的文件有效期，是一个指定日期(截止日期)，但是会受到本机系统时间影响，比如修改电脑时间到2111年，那么这个缓存就一定会过期了</p><h3 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h3><p>指服务器文件的最后修改时间，浏览器会带上If-Modified-Since字段(注意在请求头中的字段是这个，响应头中的字段才是Last-Modified)向服务器发送请求，与服务器文件修改时间Last-Modified做对比，如果时间不同，则获取数据返回200，否则返回304后调用浏览器本地硬盘的缓存。</p><p>304状态码，简单的表达就是：服务端已经执行了GET，但文件未变化。</p><p>这种方式也有问题，如果服务端文件频繁修改保存，那么Last-Modified就会频繁更改，每次都从服务端获取，这也就有了http1.1的ETag出现</p><h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><p>指文件缓存的有效期(持续时间)。</p><p><img src="/2019/09/06/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/22.png" alt="image"></p><ol><li>max-age:单位是s，设置文件最大缓存时间，用得最多。</li><li>public:缓存可以被多用户共享，例如360浏览器可以登录不同账号，电脑系统可以切换不同账号。</li><li>private:仅单用户私有，不被多用户共享。</li><li>no-cache:不会被缓存。</li><li>no-store:不允许被存储。</li></ol><h3 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h3><p><img src="/2019/09/06/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/33.png" alt="image"></p><p>http1.1推出，对应一个版本号，由服务端随机生成的，浏览器会带上If-None-Match字段向服务器发送请求，与服务器文件修改版本ETag做对比，如果版本号不同，则获取数据返回200，否则返回304后调用浏览器本地硬盘的缓存，这种方式比Last-Modified靠谱。</p><h3 id="其他知识点"><a href="#其他知识点" class="headerlink" title="其他知识点"></a>其他知识点</h3><ol><li>如果浏览器只支持http1.0，那么浏览器只会携带Last-Modified发送给后台</li><li>如果服务器只支持http1.0，那么服务器会以Last-Modified为标准。</li><li>如果浏览器支持http1.1，那么浏览器会携带Cache-Control+Last-Modified+ETag发送给后台</li><li>如果服务器支持http1.1，那么服务器会以Cache-Control+ETag为标准。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浏览器缓存是一个很重要的知识点，下面从缓存的优先级、作用、强缓存与协商缓存的特性这几个角度介绍，后续考虑补充说明。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zqyy.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="浏览器" scheme="http://zqyy.site/categories/%E5%89%8D%E7%AB%AF/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="http" scheme="http://zqyy.site/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>ts三体验——装饰器和演算</title>
    <link href="http://zqyy.site/2019/07/19/ts%E4%B8%89%E4%BD%93%E9%AA%8C%E2%80%94%E2%80%94%E7%B1%BB%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://zqyy.site/2019/07/19/ts三体验——类装饰器/</id>
    <published>2019-07-19T02:07:26.000Z</published>
    <updated>2021-08-18T12:30:44.742Z</updated>
    
    <content type="html"><![CDATA[<p>学习ts的类装饰器。<br><span id="more"></span></p><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>运行时间：在定义后直接运行<br>执行顺序：从下到上</p><h4 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h4><p>接受一个参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">target:<span class="keyword">new</span>(...args:any[]) =&gt; object</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">target:<span class="built_in">Function</span></span>)  </span>&#123;&#125;</span><br></pre></td></tr></table></figure><br>返回值类型分两种</p><ul><li>void：仅仅运行函数</li><li>返回一个新的类：新类替换旧类。利用这个可以给新类extends旧类(target)来增强功能，但是会失去类型检查，尽量不适用</li><li></li></ul><h4 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h4><p>接受两个参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params">target: any, key: string</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>如果是静态属性，表示类本身（构造函数），如果是实例属性，表示类的原型（prototype）</li><li>一个string，表示属性的名字</li></ol><h4 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">target: any, key: string, descriptor: PropertyDescriptor</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>接受三个参数</p><ol><li>如果是静态属性，表示类本身（构造函数），如果是实例属性，表示类的原型（prototype）</li><li>一个string，表示属性的名字</li><li>描述符对象</li></ol><h4 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h4><p>接受三个参数</p><ol><li>如果是静态属性，表示类本身（构造函数），如果是实例属性，表示类的原型（prototype）</li><li>方法名称</li><li>在参数列表中的索引</li></ol><h4 id="自动注入元数据"><a href="#自动注入元数据" class="headerlink" title="自动注入元数据"></a>自动注入元数据</h4><p>前提条件是：安装reflect-metadata，导入该库，在某个成员添加了元数据，并启动了emitDecoratorMetadata<br>在编译结果中，约束的类型会作为元数据加入，这样类型检查有机会在与运行时进行</p><h4 id="工具库"><a href="#工具库" class="headerlink" title="工具库"></a>工具库</h4><h5 id="reflect-metadata"><a href="#reflect-metadata" class="headerlink" title="reflect-metadata"></a>reflect-metadata</h5><p>作用:保存元数据<br>使用方法：安装后，import “reflect-meatdata”,就可以使用全局变量</p><ul><li>在需要装饰的地方用 @Reflect.metadata(Key, Value)</li><li>要获取定义过的元数据，Reflect.getMetadata(Key, target,prop?)</li><li>判断是否具有某个元数据Reflect.hasMetadata(Key, target, prop?);</li><li>直接定义元数据Reflect.defineMetadata(Key, Value, target，prop?);<h5 id="class-validator"><a href="#class-validator" class="headerlink" title="class-validator"></a>class-validator</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;reflect-metadata&quot;</span></span><br><span class="line"><span class="keyword">import</span>&#123; IsNotEmpty, validate, MinLength, MaxLength &#125;<span class="keyword">from</span> <span class="string">&quot;class-validator&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegUser</span></span>&#123;</span><br><span class="line">    @IsNotEmpty(&#123;<span class="attr">message</span>:<span class="string">&quot;账号不能为空&quot;</span>&#125;)</span><br><span class="line">    @MinLength(<span class="number">5</span>,&#123;<span class="attr">message</span>:<span class="string">&quot;至少5个字&quot;</span>&#125;)</span><br><span class="line">    @MaxLength(<span class="number">12</span>,&#123;<span class="attr">message</span>:<span class="string">&quot;至多12个字&quot;</span>&#125;)</span><br><span class="line">    <span class="attr">loginId</span>:string</span><br><span class="line">    <span class="attr">loginPwd</span>:string</span><br><span class="line">    </span><br><span class="line">    <span class="attr">age</span>:number</span><br><span class="line">    <span class="attr">gender</span>:<span class="string">&#x27;male&#x27;</span>|<span class="string">&#x27;female&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> post = <span class="keyword">new</span> RegUser()</span><br><span class="line"><span class="comment">// post.loginId = &quot;asfsd&quot;</span></span><br><span class="line">validate(post).then(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="class-transformer"><a href="#class-transformer" class="headerlink" title="class-transformer"></a>class-transformer</h5>作用：将平面对象转换为类<br>应用：假设一个应用场景，有一个用户数组，每个元素都是一个用户对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&quot;firstName&quot;</span>: <span class="string">&quot;Johny&quot;</span>,</span><br><span class="line">  <span class="string">&quot;lastName&quot;</span>: <span class="string">&quot;Cage&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span>: <span class="number">27</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">&quot;firstName&quot;</span>: <span class="string">&quot;Ismoil&quot;</span>,</span><br><span class="line">  <span class="string">&quot;lastName&quot;</span>: <span class="string">&quot;Somoni&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span>: <span class="number">50</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">&quot;firstName&quot;</span>: <span class="string">&quot;Luke&quot;</span>,</span><br><span class="line">  <span class="string">&quot;lastName&quot;</span>: <span class="string">&quot;Dacascos&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span>: <span class="number">12</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>现在有一个用户类<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="attr">id</span>: number;</span><br><span class="line">    firstName: string;</span><br><span class="line">    lastName: string;</span><br><span class="line">    age: number;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&quot; &quot;</span> + <span class="built_in">this</span>.lastName;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="title">isAdult</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age &gt; <span class="number">36</span> &amp;&amp; <span class="built_in">this</span>.age &lt; <span class="number">60</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>当拿到用户数组的时候，就算类型约束成为User类，即使我们知道这里的每个元素的的确确都是用户类，但是ts不会把对象转换为类，所以不能访问类定义的方法，依旧只能访问自身的属性。此时使用class-transformer库里面的 plainToClass()方法可以把平面对象转换为class<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&quot;users.json&quot;</span>).then(<span class="function">(<span class="params">users: <span class="built_in">Object</span>[]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> realUsers = plainToClass(User, users);</span><br><span class="line">    <span class="comment">// 现在realUsers数组里面的每个元素就都是User类了</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="类型演算"><a href="#类型演算" class="headerlink" title="类型演算"></a>类型演算</h4><p>typeof作用于类的时候，得到的是类的构造函数</p><p>keyof作用于类、接口、类型别名，可以获取这些类型的所有成员名组成的联合类型<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface User&#123;</span><br><span class="line">    <span class="built_in">id</span>:<span class="built_in">string</span></span><br><span class="line">    pwd:<span class="built_in">string</span></span><br><span class="line">    age:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line">function printProp(obj:User,<span class="keyword">prop</span>:keyof User)&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(obj[<span class="keyword">prop</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>in 通常和 keyof联用，限制索引器的取值范围，类型演算</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> User&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="built_in">string</span></span><br><span class="line">    <span class="attr">pwd</span>:<span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">    <span class="attr">createDate</span>:<span class="built_in">Date</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Userstring= &#123;</span><br><span class="line"><span class="comment">//将user的成员类型都转换成string</span></span><br><span class="line">    [prop <span class="keyword">in</span> keyof User]:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面三个在lib有定义，可以直接作为泛型类型使用</span></span><br><span class="line"><span class="comment">//将user的成员都设置为可选</span></span><br><span class="line"><span class="keyword">type</span> Partial&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只读</span></span><br><span class="line"><span class="keyword">type</span> Readonly&lt;T&gt; = &#123;</span><br><span class="line">    <span class="keyword">readonly</span> [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非空</span></span><br><span class="line"><span class="keyword">type</span> Required&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]-?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//剔除T中能赋值给U的类型</span></span><br><span class="line"><span class="keyword">type</span> Exclude&lt;T, U&gt; = T <span class="keyword">extends</span> U ? <span class="built_in">never</span> : T;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只保留T中能复制给U的类型</span></span><br><span class="line"><span class="keyword">type</span> Extract&lt;T, U&gt; = T <span class="keyword">extends</span> U ? T : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NonNullable&lt;T&gt; 去掉<span class="literal">null</span>和<span class="literal">undefined</span>类型</span><br><span class="line"></span><br><span class="line">ReturnType&lt;T&gt; 得到函数返回值的类型  传入的T是函数的类型，不是函数，可以用<span class="keyword">typeof</span></span><br><span class="line"></span><br><span class="line">InstanceType&lt;T&gt;  得到构造函数的实例类型</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习ts的类装饰器。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zqyy.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Ts" scheme="http://zqyy.site/categories/%E5%89%8D%E7%AB%AF/Ts/"/>
    
    
      <category term="Ts" scheme="http://zqyy.site/tags/Ts/"/>
    
  </entry>
  
  <entry>
    <title>几种模块化规范比较</title>
    <link href="http://zqyy.site/2019/07/19/%E5%87%A0%E7%A7%8D%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83%E6%AF%94%E8%BE%83/"/>
    <id>http://zqyy.site/2019/07/19/几种模块化规范比较/</id>
    <published>2019-07-19T02:04:48.000Z</published>
    <updated>2021-08-18T12:06:37.292Z</updated>
    
    <content type="html"><![CDATA[<p>Commonjs,AMD，CMD，ESModule 4中模块化规范比较<br><span id="more"></span></p><h3 id="commonjs"><a href="#commonjs" class="headerlink" title="commonjs"></a>commonjs</h3><p>commonjs是node应用的模块规范，每个文件都是一个模块</p><p>每个模块内部，module代表当前模块，也就是文件本身</p><p>module.exports属性是对外的接口，加载一个模块其实就是加载module.exports</p><p>每个模块都有一个exports变量，指向module.exports。相当于var exports = module.exports，但是要用直接用exports的话，只能在成员上添加，例如exports.add = function(){}，不能直接赋值，会切断和module.exports的连接，所以尽量不要直接用exports</p><p>require加载模块，返回的是引入模块的exports对象</p><h3 id="模块加载规则"><a href="#模块加载规则" class="headerlink" title="模块加载规则"></a>模块加载规则</h3><p>根据require字符串参数的不同</p><ol><li>/开头，绝对路径</li><li>./ 相对路径</li><li>一个模块的名字，加载的是核心模块，位于各级目录下的node_modules，寻找的路径是从同级目录下开始往上找</li><li>如果是路径，例如<code>require(&#39;aaa/bbb/ccc&#39;)</code>先找aaa位置，再找后面的</li><li>如果都没有找到，node会给文件名添加.js,.json,.node后缀，再去搜索，分别以js脚本解析，json文本解析，二进制文件解析</li></ol><p>第一次加载该模块，node会缓存该模块。再次加载，直接从缓存中取出该模块的module.exports属性。<br>缓存是保存在<code>require.cache</code><br>删除缓存是用<code>delete require.cache[moduleName];</code>基本不会用到这个的</p><p>模块输出的变量就跟原模块没有关系了，原来的模块变化，不会影响到输出的变量</p><h3 id="AMD与commonjs的区别"><a href="#AMD与commonjs的区别" class="headerlink" title="AMD与commonjs的区别"></a>AMD与commonjs的区别</h3><p>AMD规范则异步加载模块，允许指定回调函数</p><p>CommonJS规范加载模块是同步的，只有加载完成，才能执行后面的操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//commonjs写法</span></span><br><span class="line"><span class="keyword">var</span> clock = <span class="built_in">require</span>(<span class="string">&#x27;clock&#x27;</span>);</span><br><span class="line">clock.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//AMD写法</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;clock&#x27;</span>],<span class="function"><span class="keyword">function</span>(<span class="params">clock</span>)</span>&#123;</span><br><span class="line">  clock.start();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="AMD和CMD的区别"><a href="#AMD和CMD的区别" class="headerlink" title="AMD和CMD的区别"></a>AMD和CMD的区别</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CMD的写法</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="built_in">module</span></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> clock = <span class="built_in">require</span>(<span class="string">&#x27;clock&#x27;</span>);</span><br><span class="line">   clock.start();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>AMD和CMD最大的区别是依赖模块的执行时机不同，而不是加载时机或者加载方式不同，其实二者皆为异步加载模块</p><p>AMD依赖前置，js可以方便知道依赖模块是什么，立即加载；而CMD就近依赖，需要把模块变为字符串解析一遍才知道依赖了那些模块，但是解析模块用的时间短到可以忽略</p><h3 id="ES6的模块化"><a href="#ES6的模块化" class="headerlink" title="ES6的模块化"></a>ES6的模块化</h3><p>export后面跟要暴露的对象，export default是缺省，一个模块只能有一个default<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> name <span class="keyword">from</span> <span class="string">&quot;xxx&quot;</span>  <span class="comment">//通配符引入所有export的变量， as作用是重命名</span></span><br><span class="line"><span class="keyword">import</span> &#123;a,b,c&#125; <span class="keyword">from</span> <span class="string">&quot;xxx&quot;</span> <span class="comment">//引入指定的变量</span></span><br><span class="line"><span class="keyword">import</span> x <span class="keyword">from</span> <span class="string">&quot;&quot;</span><span class="comment">//没有使用&#123;&#125;的，这样写会引入export default</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./1.jpg&quot;</span><span class="comment">//模块也可以是图片，js文件，这样直接引入模块的代码，不引入内部成员</span></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">import</span>(<span class="string">&quot;xxx&quot;</span>) <span class="comment">//也支持异步引入，一定要绝对路径，在编译的时候会生成异步的模块，前面带有数字那些文件就是</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Commonjs,AMD，CMD，ESModule 4中模块化规范比较&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://zqyy.site/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="探索者" scheme="http://zqyy.site/categories/%E7%AC%94%E8%AE%B0/%E6%8E%A2%E7%B4%A2%E8%80%85/"/>
    
    
      <category term="模块化" scheme="http://zqyy.site/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Koa</title>
    <link href="http://zqyy.site/2019/07/17/koa/"/>
    <id>http://zqyy.site/2019/07/17/koa/</id>
    <published>2019-07-17T08:26:54.000Z</published>
    <updated>2021-08-18T12:34:51.169Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Koa框架过程中的一些心得体会和踩坑记录。</p><span id="more"></span><h3 id="ctx里面的常见参数"><a href="#ctx里面的常见参数" class="headerlink" title="ctx里面的常见参数"></a>ctx里面的常见参数</h3><p>ctx.method/url/path/query/ip</p><p>throw()<br>assert(!condition,statuscode,xxxxx)会把错误信息暴露在前端，当第一个参数的条件不满足执行后面的</p><p>ctx.status 设状态码<br>ctx.redirect 重定向<br>ctx.attachment下载文件<br>ctx.state.变量名  用来设置全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.status = <span class="number">301</span>||<span class="number">302</span></span><br><span class="line">ctx.redirect = <span class="string">&#x27;/xx.html&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="文件的坑"><a href="#文件的坑" class="headerlink" title="文件的坑"></a>文件的坑</h3><p>使用koa-body 或者koa-better-body 获取上传的文件的坑<br>新版本的koa-body通过ctx.request.files获取上传的文件 。现在用这个<br>旧版本的koa-body通过ctx.request.body.files获取上传的文件 ,史诗巨坑</p><p>读文件可以用await-fa模块</p><p>koa-better-body还可以用ctx.request.fields获取各种类型的请求参数<br>其中文件的写法式ctx.request.fields.file 等价于 ctx.request.files</p><p>能用绝对路径的不要用相对，引入path模块，path.resolve(_dirname,’./xxx’)</p><h3 id="中间件的坑"><a href="#中间件的坑" class="headerlink" title="中间件的坑"></a>中间件的坑</h3><p>使用中间件，一定要写next(),并且next()前面一定要有await()，不然会莫名其妙404</p><p>要做集中处理错误信息router.all(‘*’,async(ctx,next)=&gt; {<br>    try{}catch{}<br>})</p><p>使用中间件是.use   写规则是.all </p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>设置cookie<br>ctx.cookies.set(name, value, [options])<br>options里面可以写maxAge</p><p>获取cookie<br>ctx.cookies.get(‘name’);</p><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">在app.js设置</span><br><span class="line">app.keys = [<span class="string">&#x27;some secret hurr&#x27;</span>];<span class="comment">//放置一堆key</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CONFIG = &#123;</span><br><span class="line">   <span class="attr">key</span>: <span class="string">&#x27;koa:sess&#x27;</span>,   <span class="comment">//修改key的名字</span></span><br><span class="line">   <span class="attr">maxAge</span>: <span class="number">86400000</span>,  <span class="comment">// cookie的过期时间 </span></span><br><span class="line">   <span class="attr">signed</span>: <span class="literal">true</span>,   <span class="comment">//签名默认true</span></span><br><span class="line">   <span class="attr">renew</span>: <span class="literal">true</span>,  <span class="comment">//过期自动刷新</span></span><br><span class="line">&#125;;</span><br><span class="line">app.use(session(CONFIG, app)); <span class="comment">//第二个参数是app，注意</span></span><br></pre></td></tr></table></figure><p>设置值 ctx.session.username = “张三”;</p><p>获取值 ctx.session.username</p><h3 id="允许跨域"><a href="#允许跨域" class="headerlink" title="允许跨域"></a>允许跨域</h3><p>有专门的中间件，不用写那一串了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;koa2-cors&#x27;</span>);</span><br><span class="line">app.use(cors())</span><br></pre></td></tr></table></figure></p><h3 id="gzip压缩页面"><a href="#gzip压缩页面" class="headerlink" title="gzip压缩页面"></a>gzip压缩页面</h3><p>加快网页的加载速度<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> compress = <span class="built_in">require</span>(<span class="string">&#x27;koa-compress&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = koa()；</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123; <span class="attr">threshold</span>: <span class="number">2048</span> &#125;;</span><br><span class="line"> app.use(compress(options));</span><br></pre></td></tr></table></figure></p><p>websock，reg，webpack，es6</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用Koa框架过程中的一些心得体会和踩坑记录。&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="http://zqyy.site/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Node" scheme="http://zqyy.site/categories/%E5%90%8E%E7%AB%AF/Node/"/>
    
    
      <category term="Koa" scheme="http://zqyy.site/tags/Koa/"/>
    
  </entry>
  
  <entry>
    <title>prototype和和_proto_的区别</title>
    <link href="http://zqyy.site/2019/07/11/prototype%E5%92%8C%E5%92%8C-proto-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://zqyy.site/2019/07/11/prototype和和-proto-的区别/</id>
    <published>2019-07-11T08:11:49.000Z</published>
    <updated>2021-08-18T12:27:54.360Z</updated>
    
    <content type="html"><![CDATA[<p><em>proto</em>这个属性的意思是，指向自己的父亲创造自己时用的构造方法。<br>而prototype这个属性的意思就是，我自己创建孩子（创建对象）的时候用的构造方法。<br><span id="more"></span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">too</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.t = <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> too()</span><br><span class="line"><span class="built_in">console</span>.log(t._proto_)</span><br><span class="line"><span class="built_in">console</span>.log(too.prototype)</span><br></pre></td></tr></table></figure><p>Function去创造了too这个对象，而用too的too()这个构造方法，去创建了t这个对象，所以关系是function生了too,too生了t</p><p>这时用instanceof()来判断，instanceof是比较左侧的<em>proto</em>和右侧的prototype是否相同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(t <span class="keyword">instanceof</span> too)  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(too <span class="keyword">instanceof</span> <span class="built_in">Function</span>) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(t <span class="keyword">instanceof</span> <span class="built_in">Function</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;proto&lt;/em&gt;这个属性的意思是，指向自己的父亲创造自己时用的构造方法。&lt;br&gt;而prototype这个属性的意思就是，我自己创建孩子（创建对象）的时候用的构造方法。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zqyy.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="基础" scheme="http://zqyy.site/categories/%E5%89%8D%E7%AB%AF/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Js" scheme="http://zqyy.site/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>ts再体验——class类</title>
    <link href="http://zqyy.site/2019/07/10/ts%E5%86%8D%E4%BD%93%E9%AA%8C%E2%80%94%E2%80%94class%E7%B1%BB/"/>
    <id>http://zqyy.site/2019/07/10/ts再体验——class类/</id>
    <published>2019-07-10T02:50:11.000Z</published>
    <updated>2021-08-18T12:31:13.156Z</updated>
    
    <content type="html"><![CDATA[<p>学习ts的class。<br><span id="more"></span></p><h3 id="抽象成员"><a href="#抽象成员" class="headerlink" title="抽象成员"></a>抽象成员</h3><p>应用场景：父类中，知道有些成员必须要存在，但是不知道具体的值是什么，在成员前面加abstract强约束在子类中一定要实现这个成员</p><p>注意事项： 必须在抽象类中，抽象成员，不管是方法还是属性，在子类中一定要继承</p><h3 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h3><p>有些方法，所有子类实现的流程是完全一致的，只是某个步骤不一样，可以将这个方法提取到父类，在父类中完成整个流程的实现，对于实现不一致的方法，再将其做成抽象方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chess</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.y = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">move</span>(<span class="params">targetX, targetY</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;相同的规则1&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;相同的规则2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.rule) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Horse</span> <span class="keyword">extends</span> <span class="title">Chess</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(...arguments);</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&#x27;马&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">rule</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;马怎么走&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pao</span> <span class="keyword">extends</span> <span class="title">Chess</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">rule</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;跑怎么走&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&#x27;炮&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Soldier</span> <span class="keyword">extends</span> <span class="title">Chess</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">rule</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;兵怎么走&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title">name</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;兵&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>某些类的对象，在系统中最多只能有一个，为了避免开发者造成随意创建多个类的对象的错误，可以用单例模式强约束<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Board</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = <span class="number">500</span>;</span><br><span class="line">        <span class="built_in">this</span>.height = <span class="number">700</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;初始化&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">createBoard</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>._board) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>._board;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>._board = <span class="keyword">new</span> Board();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._board;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> b = Board.createBoard();</span><br><span class="line"><span class="keyword">const</span> b2 = Board.createBoard();</span><br><span class="line"><span class="built_in">console</span>.log(b === b2); <span class="comment">//结果是true</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="类型保护函数"><a href="#类型保护函数" class="headerlink" title="类型保护函数"></a>类型保护函数</h3><p>通过这种函数会触发类型保护，该函数返回boolean<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">//动物具有的共同属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> animals = [<span class="string">&#x27;dog&#x27;</span>,<span class="string">&#x27;cat&#x27;</span>,<span class="string">&#x27;lion&#x27;</span>]; <span class="comment">//一堆动物</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasFireShow</span>(<span class="params">ani</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ani.singleFire &amp;&amp; ani.doubleFire) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">animals.forEach(<span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasFireShow(a)) &#123;</span><br><span class="line">        a.singleFire();</span><br><span class="line">        a.doubleFire();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="索引器（成员表达式）"><a href="#索引器（成员表达式）" class="headerlink" title="索引器（成员表达式）"></a>索引器（成员表达式）</h3><p>注意：</p><ol><li>索引器要写在所有成员之前</li><li>默认情况下，不会对索引器做严格的类型检查</li><li>打开配置”noImplicitAny”:true,//开启对隐式any的类型检查，但是这不仅仅影响索引器，很多地方都会增强类型检查</li></ol><p>作用：</p><ol><li>在严格的类型检查下，可以实现给类动态地增加成员</li><li>可以实现动态操作类成员</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    [prop:string]:any</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">public name :string,public age:number</span>)</span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> User(<span class="string">&#x27;aa&#x27;</span>,<span class="number">22</span>)</span><br><span class="line">u[<span class="string">&#x27;6&#x27;</span>] = <span class="string">&#x27;sdf&#x27;</span></span><br><span class="line">u[<span class="number">5</span>] = <span class="string">&#x27;sdf&#x27;</span></span><br></pre></td></tr></table></figure><p>在js中，所有的成员名本质上都是字符串，如果使用number作为成员名，会自动转换为字符串<br>在ts中，如果某个类使用了两种类型的索引器，要求两种索引器的值必须是一样<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myArray</span></span>&#123;</span><br><span class="line">    [prop:number]:string</span><br><span class="line">    [prop:string]:string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h3><p>在ts中，允许在书写函数时，手动声明该函数中this的指向。将this作为函数第一个参数，该参数只用于约束this，并不是真正的参数，不会出现在编译结果中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">public name:string , public age:number</span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"><span class="built_in">this</span>:User</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>,<span class="built_in">this</span>.name,<span class="built_in">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，实际上this的最终指向的是那个调用它的对象</p><p>这个函数中包含多个对象，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习ts的class。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zqyy.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Ts" scheme="http://zqyy.site/categories/%E5%89%8D%E7%AB%AF/Ts/"/>
    
    
      <category term="Ts" scheme="http://zqyy.site/tags/Ts/"/>
    
  </entry>
  
  <entry>
    <title>ts初体验——类型系统</title>
    <link href="http://zqyy.site/2019/07/10/ts%E5%88%9D%E4%BD%93%E9%AA%8C%E2%80%94%E2%80%94%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/"/>
    <id>http://zqyy.site/2019/07/10/ts初体验——类型系统/</id>
    <published>2019-07-10T02:48:45.000Z</published>
    <updated>2021-08-18T12:30:31.872Z</updated>
    
    <content type="html"><![CDATA[<p>学习ts的类型系统。<br><span id="more"></span></p><h3 id="默认情况下，做出以下假设"><a href="#默认情况下，做出以下假设" class="headerlink" title="默认情况下，做出以下假设"></a>默认情况下，做出以下假设</h3><ol><li>假设当前的执行环境是dom</li><li>如果代码中没有使用模块化语句（import、export），便认为该代码是全局执行</li><li>编译的目标代码是ES3</li></ol><p>两种方式更改以上假设</p><ol><li>使用tsc命令的时候，加上选项参数</li><li>使用ts配置文件，更改编译选项（使用配置文件后，用tsc命令不用跟文件名<br>tsconfig的生成命令是tsc –init</li></ol><h3 id="用到的辅助工具包"><a href="#用到的辅助工具包" class="headerlink" title="用到的辅助工具包"></a>用到的辅助工具包</h3><ol><li>@types/node 官方的类型库，补充类型定义，相同的还有@types/jquery等</li><li>ts-node 编译时运行，不用生成js文件就可以运行</li><li>nodemon 选项参数 -e 只对什么后缀的文件监听</li></ol><p>利用这些辅助工具可以在package.json中自定义命令<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;nodemon --watch src -e ts --exec ts-node src/index.ts&quot;</span>,</span><br><span class="line">        <span class="string">&quot;build&quot;</span>: <span class="string">&quot;rd /s /q dist &amp; tsc&quot;</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p><h3 id="其他类型"><a href="#其他类型" class="headerlink" title="其他类型"></a>其他类型</h3><ol><li>联合类型:多种类型选择一个，类型保护：对某个变量类型判断之后，在判断语句块中可以确定类型，typeof可以触发类型保护</li><li>void 用于约束函数返回值，表示没有返回</li><li>never 用户约束函数返回值，表示函数不能结束，一般是用于抛出异常或者无限循环</li><li>字面量类型：限定只能赋值为什么<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">字面量应用场景举例</span><br><span class="line"><span class="keyword">let</span> gender : <span class="string">&quot;男&quot;</span>|<span class="string">&quot;女&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr:[] arr变量只能赋值为空数组</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user =&#123;</span><br><span class="line">    <span class="attr">name</span>:string;</span><br><span class="line">    age:number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>元组 一个固定长度的数组，数组中每一项的类型确定(明确数组的长度和每一个元素)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tuarr :[string , number]</span><br></pre></td></tr></table></figure></li><li>any 可以绕过类型检查，可以赋值任意类型</li></ol><h3 id="函数的相关约束"><a href="#函数的相关约束" class="headerlink" title="函数的相关约束"></a>函数的相关约束</h3><p>函数重载：在函数实现之前，对函数调用的多种情况声明</p><p>可选参数：可以在某些参数名后加上问号，表示该参数可以不用传递,可选参数只能在参数的末尾，可以使用多个？</p><p>默认参数值：在函数形参直接赋值，如下面例子的c初始化为0<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a:number,b:number,c:number = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">sum(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure></p><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><h4 id="首先，为什么要用枚举"><a href="#首先，为什么要用枚举" class="headerlink" title="首先，为什么要用枚举"></a>首先，为什么要用枚举</h4><p>A:字面量类型可以实现一些枚举也能做到的效果，但是会出现大量的重复代码，而类型别名虽然又可以解决代码重复的问题，但是如果要修改某个值，可能会出现大量的改动,并且字面量类型不会进入编译结果，而枚举类型会进入编译结果</p><p>先举个栗子吧<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串枚举</span></span><br><span class="line">enum Gender&#123;</span><br><span class="line">    <span class="attr">male</span>:<span class="string">&#x27;男&#x27;</span>, <span class="comment">//要修改的话是修改后面的真值，使用枚举类型是使用前面的字段名</span></span><br><span class="line">    <span class="attr">female</span>:<span class="string">&#x27;女&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数字枚举</span></span><br><span class="line"></span><br><span class="line">enum Permission&#123;</span><br><span class="line">    Read = <span class="number">1</span>,</span><br><span class="line">    Write =<span class="number">2</span> ,</span><br><span class="line">    Create =<span class="number">4</span> ,</span><br><span class="line">    Delete = <span class="number">8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> gender :Gender = Gender.male</span><br></pre></td></tr></table></figure></p><h4 id="枚举的一些注意事项"><a href="#枚举的一些注意事项" class="headerlink" title="枚举的一些注意事项"></a>枚举的一些注意事项</h4><ol><li>枚举的值只能是字符串或者数字</li><li>枚举会出现在编译结果中，表现为对象</li><li>数字枚举的值会自增，如果数字枚举第一个没有赋值，那就从0开始，如果第一个赋值了，后面的就算没有赋值也会自增</li><li>被数字枚举约束的变量可以直接赋值为数字，但是最好不要</li><li>两种(数字，字符串)枚举的编译结果js差别挺大<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">enum Level &#123;</span><br><span class="line">    Level1 =<span class="number">1</span>,</span><br><span class="line">    Level2,</span><br><span class="line">    Level3</span><br><span class="line">&#125;</span><br><span class="line">这是数字枚举的编译结果，可以看出是把键值对方向又赋值了一遍</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Level;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Level</span>) </span>&#123;</span><br><span class="line">    Level[Level[<span class="string">&quot;Level1&quot;</span>] = <span class="number">1</span>] = <span class="string">&quot;Level1&quot;</span>;</span><br><span class="line">    Level[Level[<span class="string">&quot;Level2&quot;</span>] = <span class="number">2</span>] = <span class="string">&quot;Level2&quot;</span>;</span><br><span class="line">    Level[Level[<span class="string">&quot;Level3&quot;</span>] = <span class="number">3</span>] = <span class="string">&quot;Level3&quot;</span>;</span><br><span class="line">&#125;)(Level || (Level = &#123;&#125;));</span><br><span class="line"></span><br><span class="line">因此在用<span class="built_in">Object</span>.values遍历的时候会发现有<span class="number">6</span>个结果</span><br></pre></td></tr></table></figure></li><li>一个枚举中不要同时出现既有字符串字段又有数字字段</li><li>尽量使用字段名，而不是真值</li></ol><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>模块化标准如果设置是ES6：和正常写没有区别<br>模块化标准是commonjs，导出变成exports的属性，默认导出变成exports.default</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对于引入fs这种模块，使用<span class="built_in">module</span>.exports导出的</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、 <span class="keyword">import</span> * <span class="keyword">as</span> fs <span class="keyword">from</span> <span class="string">&quot;fs&quot;</span>;</span><br><span class="line"><span class="number">2</span>、 <span class="keyword">import</span> &#123;readFileSync&#125; <span class="keyword">from</span> <span class="string">&quot;fs&quot;</span>;</span><br><span class="line"><span class="number">3</span>、 <span class="string">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,  <span class="comment">//启动es模块化交互非es模块导出</span></span><br></pre></td></tr></table></figure><p>如果一定要用commonjs，写法则有点像是commonjs和es6的混合<br>导出 export = {xxx}<br>导入 import xxx = require(‘xxx’)</p><p>有关模块解析得另开一篇章节了</p><h3 id="接口interface"><a href="#接口interface" class="headerlink" title="接口interface"></a>接口interface</h3><p>可以通过接口之间的继承实现多种接口的组合</p><p>使用类型别名可以实现类似的组合效果，通过&amp;，又叫交叉类型</p><p>接口与类型别名异同</p><ol><li>子接口不能覆盖父接口的成员</li><li>交叉类型会把相同成员的类型进行交叉 出现既是string又是number的类型</li><li>都不出现在编译结果</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">接口约束对象，</span><br><span class="line">interface User &#123;</span><br><span class="line">    <span class="attr">name</span> :string</span><br><span class="line">    <span class="attr">age</span>:number</span><br><span class="line">    <span class="attr">say</span>:<span class="function">()=&gt;</span><span class="keyword">void</span>或者是</span><br><span class="line">    say():<span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line">接口约束函数</span><br><span class="line">interface condition &#123;</span><br><span class="line">    (m:number):boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">交叉类型实现interface C <span class="keyword">extends</span> A,B</span><br><span class="line">type C = &#123;</span><br><span class="line">    <span class="attr">T3</span>:boolean</span><br><span class="line">&#125; &amp; A &amp; B</span><br></pre></td></tr></table></figure><h3 id="readonly关键字"><a href="#readonly关键字" class="headerlink" title="readonly关键字"></a>readonly关键字</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">    <span class="keyword">readonly</span> id :<span class="built_in">string</span></span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span> :<span class="built_in">number</span></span><br><span class="line">    <span class="keyword">readonly</span> arr : <span class="keyword">readonly</span> <span class="built_in">string</span>[]</span><br><span class="line">&#125;</span><br><span class="line">前面的<span class="keyword">readonly</span>表示数组不能被重新赋值，但是可以push等，后面的<span class="keyword">readonly</span>是修饰类型，不可push，pop等</span><br><span class="line"><span class="keyword">const</span> arr: ReadonlyArray&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><h3 id="class类"><a href="#class类" class="headerlink" title="class类"></a>class类</h3><h4 id="类型的初始化检查"><a href="#类型的初始化检查" class="headerlink" title="类型的初始化检查"></a>类型的初始化检查</h4><p>启动严格检查     <code>&quot;strictPropertyInitialization&quot;: true</code></p><p>初始化可以在三个位置进行，构造函数里或者属性位置或者构造函数参数<br>属性可以设置 可选？，只读readonly<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">   readonly id:number  <span class="comment">//只读</span></span><br><span class="line">    <span class="attr">name</span>:string</span><br><span class="line">    <span class="attr">age</span> : number</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;man&#x27;</span>|<span class="string">&#x27;female&#x27;</span> = <span class="string">&#x27;man&#x27;</span></span><br><span class="line">    pid ?:string     <span class="comment">//可选</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:string,age:number</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = <span class="built_in">Math</span>.random();</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>public\private\protect<br>当某个属性通过构造函数传参，没有经过改变就直接赋值给属性的时候，利用修饰符可以属性简写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    readonly id:number  </span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;man&#x27;</span>|<span class="string">&#x27;female&#x27;</span> = <span class="string">&#x27;man&#x27;</span></span><br><span class="line">    pid ?:string     </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">public name:string,public age:number</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = <span class="built_in">Math</span>.random();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问器"><a href="#访问器" class="headerlink" title="访问器"></a>访问器</h4><p>用来控制属性的赋值和读取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">将上面构造函数中的 public age:number 改成private _age:number</span><br><span class="line"><span class="keyword">set</span> <span class="title">age</span>(<span class="params">value :number</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(value &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>._age = <span class="number">0</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>._age = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title">age</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">this</span>._age)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>是指附属于函数、类、接口、类型别名之上的类型，相当于是一个类型变量，在定义时无法预先知道具体的类型，可以用泛型代替，只有调用的时候才能确定类型<br>多数情况下，可以通过类型推导根据传递的参数得出泛型的类型<br>如果无法推导，又没有写具体的泛型类型，默认为空对象</p><p>泛型约束</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; log &#125; <span class="keyword">from</span> <span class="string">&quot;util&quot;</span>;</span><br><span class="line"></span><br><span class="line">interface hasNamePropety &#123;</span><br><span class="line">    <span class="attr">name</span>: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nameToUpper</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">hasNamePropety</span>&gt;(<span class="params">obj: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    obj.name = obj.name</span><br><span class="line">        .split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        .map(<span class="function"><span class="params">s</span> =&gt;</span> s[<span class="number">0</span>].toUpperCase() + s.substr(<span class="number">1</span>))</span><br><span class="line">        .join(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zheng qingyi&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newo = nameToUpper(o)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newo);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>多泛型使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mixinArray</span>&lt;<span class="title">T</span>,<span class="title">K</span>&gt;(<span class="params">arr1:T[],arr2:K[]</span>) : (<span class="params">T|K</span>)[] </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习ts的类型系统。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zqyy.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Ts" scheme="http://zqyy.site/categories/%E5%89%8D%E7%AB%AF/Ts/"/>
    
    
      <category term="Ts" scheme="http://zqyy.site/tags/Ts/"/>
    
  </entry>
  
  <entry>
    <title>小程序续篇</title>
    <link href="http://zqyy.site/2019/07/10/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BB%AD%E7%AF%87/"/>
    <id>http://zqyy.site/2019/07/10/小程序续篇/</id>
    <published>2019-07-10T02:45:08.000Z</published>
    <updated>2021-08-18T12:10:04.310Z</updated>
    
    <content type="html"><![CDATA[<p>接上一篇小程序初体验<br><span id="more"></span></p><h3 id="有关样式"><a href="#有关样式" class="headerlink" title="有关样式"></a>有关样式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">内联样式可以配合数据绑定</span><br><span class="line"></span><br><span class="line">&lt;view style=<span class="string">&quot;width:500rpx;height:30px;background-color:&#123;&#123;colorValue&#125;&#125;;&quot;</span>&gt;&lt;/view&gt;</span><br><span class="line">Page(&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">colorValue</span>:<span class="string">&#x27;red&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">静态样式写入类<span class="class"><span class="keyword">class</span>,动态样式写入<span class="title">style</span>内联样式中</span></span><br><span class="line"><span class="class">选择器权重雷同，!<span class="title">important</span>一般用在修改使用插件的样式</span></span><br></pre></td></tr></table></figure><h3 id="MINA框架"><a href="#MINA框架" class="headerlink" title="MINA框架"></a>MINA框架</h3><p><img src="/2019/07/10/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BB%AD%E7%AF%87/小程序续篇/small1.png" alt=""></p><h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h3><h4 id="启动-热启动与冷启动-小程序没有重启的概念"><a href="#启动-热启动与冷启动-小程序没有重启的概念" class="headerlink" title="启动(热启动与冷启动)(小程序没有重启的概念)"></a>启动(热启动与冷启动)(小程序没有重启的概念)</h4><p>热启动：假如用户已经打开过某小程序，然后在一定时间内（五分钟）再次打开该小程序，此时无需重新启动，只需将后台态的小程序切换到前台</p><p>冷启动：用户首次打开或小程序被微信主动销毁后再次打开的情况，此时小程序需要重新加载启动。<br>那么什么情况下会销毁，主要是两种情况</p><ol><li>小程序进入后台，客户端会维持一段时间的运行状态，超过一定时间后（目前是5分钟）会被微信主动销毁</li><li>当短时间内（5s）连续收到两次以上收到系统内存告警，会进行小程序的销毁</li></ol><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>在冷启动的时候如果发现新版本，将会异步下载新版本的代码包，并同时用客户端本地的包进行启动，即新版本的小程序需要等下一次冷启动才会应用上。 如果需要马上应用最新版本，可以使用 wx.getUpdateManager API 进行处理，这个API调用代码放在app.js的onLaunch。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取小程序更新机制兼容</span></span><br><span class="line">    <span class="keyword">if</span> (wx.canIUse(<span class="string">&#x27;getUpdateManager&#x27;</span>)) &#123;</span><br><span class="line">      <span class="keyword">const</span> updateManager = wx.getUpdateManager()</span><br><span class="line">      updateManager.onCheckForUpdate(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 请求完新版本信息的回调</span></span><br><span class="line">        <span class="keyword">if</span> (res.hasUpdate) &#123;</span><br><span class="line">          updateManager.onUpdateReady(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            wx.showModal(&#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;更新提示&#x27;</span>,</span><br><span class="line">              <span class="attr">content</span>: <span class="string">&#x27;新版本已经准备好，是否重启应用？&#x27;</span>,</span><br><span class="line">              <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">                  <span class="comment">// 新的版本已经下载好，调用 applyUpdate 应用新版本并重启</span></span><br><span class="line">                  updateManager.applyUpdate()</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">          updateManager.onUpdateFailed(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 新的版本下载失败</span></span><br><span class="line">            wx.showModal(&#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;已经有新版本了哟~&#x27;</span>,</span><br><span class="line">              <span class="attr">content</span>: <span class="string">&#x27;新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~&#x27;</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果希望用户在最新版本的客户端上体验您的小程序，可以这样子提示</span></span><br><span class="line">      wx.showModal(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&#x27;当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h4 id="程序的生命周期"><a href="#程序的生命周期" class="headerlink" title="程序的生命周期"></a>程序的生命周期</h4><p>onLaunch onShow onHide  onError</p><h4 id="页面的生命周期"><a href="#页面的生命周期" class="headerlink" title="页面的生命周期"></a>页面的生命周期</h4><ol><li>onLoad 页面初次加载的时候调用，页面销毁前只调用一次 在回调中可以得到打开参数</li><li>onShow  页面显示后调用 从别的页面到这也会调用</li><li>onReady 初次渲染完成调用 在onShow之后调用  销毁前只有一次</li><li>onHide 打开新界面的时候，当前页面调用</li><li>onUnload 关闭界面的时候调用</li></ol><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><table><thead><tr><th>路由方式</th><th>触发时间</th><th>路由前页面调用啥</th></tr></thead><tbody><tr><td>初始化</td><td>小程序打开的第一个界面</td></tr><tr><td>打开新界面</td><td>wx.navigateTo == <navigator open-type="navigateTo"></navigator></td><td>onHide</td></tr><tr><td>重定向</td><td>wx.redirectTo == <navigator open-type="redirectTo"></navigator></td><td>onUnload</td></tr><tr><td>返回</td><td>wx.navigateBack == <navigator open-type="navigateBack"></navigator></td><td>onUnload</td></tr><tr><td>Tab切换</td><td>wx.switchTab == <navigator open-type="switchTab"></navigator></td></tr><tr><td>重启</td><td>wx.relaunch == <navigator open-type="relaunch"></navigator></td><td>onUnload</td></tr></tbody></table><h3 id="登录流程图"><a href="#登录流程图" class="headerlink" title="登录流程图"></a>登录流程图</h3><p><img src="/2019/07/10/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BB%AD%E7%AF%87/小程序续篇/small2.png" alt=""></p><p><img src="/2019/07/10/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BB%AD%E7%AF%87/小程序续篇/small3.png" alt=""></p><h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><p>在用code换取到session_key和openid时，直接data.openid是拿不到的，经过检验类型，此时返回的是json字符串，需要自行JSON.parse()</p><p>wx.getUserInfo 不能用了 需要用button打开类型设定为getUserInfo才能</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接上一篇小程序初体验&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zqyy.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="小程序" scheme="http://zqyy.site/categories/%E5%89%8D%E7%AB%AF/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://zqyy.site/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Ajax|fetch|Websocket</title>
    <link href="http://zqyy.site/2019/04/03/ajax-fetch-websocket/"/>
    <id>http://zqyy.site/2019/04/03/ajax-fetch-websocket/</id>
    <published>2019-04-03T06:17:20.000Z</published>
    <updated>2021-08-18T12:14:36.861Z</updated>
    
    <content type="html"><![CDATA[<p>常见的三种前端发送请求的方式，介绍其使用方法和相关要点。<br><span id="more"></span></p><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><h4 id="AJAX状态值与状态码区别"><a href="#AJAX状态值与状态码区别" class="headerlink" title="AJAX状态值与状态码区别"></a>AJAX状态值与状态码区别</h4><blockquote><p>AJAX状态值是指，运行AJAX所经历过的几种状态，无论访问是否成功都将响应的步骤，可以理解成为AJAX运行步骤。如：正在发送，正在响应等，由AJAX对象与服务器交互时所得；使用“ajax.readyState”获得。（由数字1~4单位数字组成）</p></blockquote><blockquote><p>AJAX状态码是指，无论AJAX访问是否成功，由HTTP协议根据所提交的信息，服务器所返回的HTTP头信息代码，该信息使用“ajax.status”所获得；（由数字1XX,2XX三位数字组成，详细查看RFC）<br>这就是我们在使用AJAX时为什么采用下面的方式判断所获得的信息是否正确的原因。</p></blockquote><h4 id="Ajax写法"><a href="#Ajax写法" class="headerlink" title="Ajax写法"></a>Ajax写法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举个例子,原生写法</span></span><br><span class="line"><span class="comment">//如果是post请求，json数据写在send()</span></span><br><span class="line"> <span class="keyword">let</span> ajax=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        ajax.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://localhost:8080/a&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">        ajax.send();</span><br><span class="line">        ajax.onreadystatechange=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(ajax.readyState==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ajax.status&gt;=<span class="number">200</span> &amp;&amp; ajax.status&lt;<span class="number">300</span> || ajax.status==<span class="number">304</span>)&#123;</span><br><span class="line">              alert(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">              <span class="keyword">let</span> json=<span class="built_in">JSON</span>.parse(ajax.responseText);</span><br><span class="line">              <span class="built_in">console</span>.log(json);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              alert(<span class="string">&#x27;失败&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JQ的写法</span></span><br><span class="line"><span class="comment">//url,type,data必备，dataType默认是json，</span></span><br><span class="line"><span class="comment">//如果是发送jsonp数据，额外加一个jsonp:&quot;cb&quot;，值是回调函数的名字</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line"><span class="attr">url</span>:<span class="string">&quot;http://xxxx&quot;</span>,</span><br><span class="line"><span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span></span><br><span class="line"><span class="attr">data</span>:&#123;<span class="attr">wd</span>:<span class="string">&#x27;xxx&#x27;</span>&#125;,</span><br><span class="line"><span class="attr">dataType</span>:<span class="string">&#x27;text/json/jsonp&#x27;</span>,</span><br><span class="line"><span class="attr">jsonp</span>:<span class="string">&#x27;cb&#x27;</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">&#123;s&#125;</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//成功执行函数</span></span><br><span class="line">&#125; , <span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//失败执行函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="AJAX运行步骤与状态值说明"><a href="#AJAX运行步骤与状态值说明" class="headerlink" title="AJAX运行步骤与状态值说明"></a>AJAX运行步骤与状态值说明</h4><blockquote><p>在AJAX实际运行当中，对于访问XMLHttpRequest（XHR）时并不是一次完成的，而是分别经历了多种状态后取得的结果，对于这种状态在AJAX中共有5种，分别是。</p><ul><li>0 - (未初始化)还没有调用send()方法</li><li>1 - (载入)已调用send()方法，正在发送请求</li><li>2 - (载入完成)send()方法执行完成，</li><li>3 - (交互)正在解析响应内容</li><li>4 - (完成)响应内容解析完成，可以在客户端调用了<br>对于上面的状态，其中“0”状态是在定义后自动具有的状态值，而对于成功访问的状态（得到信息）我们大多数采用“4”进行判断。</li></ul></blockquote><h4 id="AJAX状态码-经常说的服务器status-说明"><a href="#AJAX状态码-经常说的服务器status-说明" class="headerlink" title="AJAX状态码(经常说的服务器status)说明"></a>AJAX状态码(经常说的服务器status)说明</h4><ul><li>1**：请求收到，继续处理</li><li>2**：操作成功收到，分析、接受</li><li>3**：完成此请求必须进一步处理</li><li>4**：请求包含一个错误语法或不能完成</li></ul><ul><li>5**：服务器执行一个完全有效请求失败</li><li>100——客户必须继续发出请求</li></ul><h3 id="fetch使用"><a href="#fetch使用" class="headerlink" title="fetch使用"></a>fetch使用</h3><p>1、 先获取 let res = await fetch(‘xxxx.jpg’)<br><br>2、 再解析 await res.text()/json()/blob()<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个栗子</span></span><br><span class="line"><span class="comment">//如果是fetch一个二进制文件，res.blob()之后要用 URL.createObjectURL生成一个url才能用</span></span><br><span class="line"><span class="built_in">window</span>.onload= <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn1&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> img1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;img1&#x27;</span>)</span><br><span class="line">            oBtn.onclick = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> res = <span class="keyword">await</span> fetch(<span class="string">&#x27;./1.jpg&#x27;</span>)</span><br><span class="line">                <span class="keyword">let</span> data = <span class="keyword">await</span> res.blob(res)</span><br><span class="line">                <span class="keyword">let</span> url = URL.createObjectURL(data)</span><br><span class="line">                img1.src = url;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h3 id="Ajax2-0"><a href="#Ajax2-0" class="headerlink" title="Ajax2.0"></a>Ajax2.0</h3><p><i>主要是formdata的使用</i><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="comment">//原生js获取表单元素传入 </span></span><br><span class="line"><span class="keyword">let</span> oForm=<span class="built_in">document</span>.querySelector(<span class="string">&#x27;#form1&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> formdata=<span class="keyword">new</span> FormData(oForm);</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、 <span class="comment">//jq获取表单元素传入</span></span><br><span class="line"> $(<span class="string">&#x27;#form1&#x27;</span>).on(<span class="string">&#x27;submit&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> formdata=<span class="keyword">new</span> FormData(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="built_in">this</span>.action,</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">this</span>.method,</span><br><span class="line">      <span class="attr">data</span>: formdata,</span><br><span class="line">      <span class="attr">processData</span>: <span class="literal">false</span>,<span class="comment">//取消jq默认的数据格式转换</span></span><br><span class="line">      <span class="attr">contentType</span>: <span class="literal">false</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      alert(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">    &#125;, <span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      alert(<span class="string">&#x27;失败&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、<span class="comment">//生成一个空的FormData对象,用append(&#x27;key&#x27;,&#x27;value&#x27;)</span></span><br><span class="line"><span class="keyword">let</span> formdata = <span class="keyword">new</span> FormData();</span><br><span class="line">formdata.append(<span class="string">&#x27;xxx&#x27;</span>,xxxx)</span><br></pre></td></tr></table></figure></p><h3 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h3><h4 id="使用socket-io库实现简单的连接"><a href="#使用socket-io库实现简单的连接" class="headerlink" title="使用socket.io库实现简单的连接"></a>使用socket.io库实现简单的连接</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> io=<span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.建立普通http</span></span><br><span class="line"><span class="keyword">let</span> server=http.createServer(<span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;&#125;);</span><br><span class="line">server.listen(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.建立ws</span></span><br><span class="line"><span class="keyword">let</span> wsServer=io.listen(server);</span><br><span class="line">wsServer.on(<span class="string">&#x27;connection&#x27;</span>, <span class="function"><span class="params">sock</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//sock.emit(&#x27;name&#x27;, 数据)</span></span><br><span class="line">  <span class="comment">//sock.on(&#x27;name&#x27;, function (数据)&#123;&#125;);</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    sock.emit(<span class="string">&#x27;timer&#x27;</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime());</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">dir</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:8080/socket.io/socket.io.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> sock=io.connect(<span class="string">&#x27;ws://localhost:8080/&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    sock.on(<span class="string">&#x27;timer&#x27;</span>, <span class="function"><span class="params">time</span>=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.slog(time);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br></pre></td></tr></table></figure><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><h4 id="JSON的产生"><a href="#JSON的产生" class="headerlink" title="JSON的产生"></a>JSON的产生</h4><p>ajax请求会有跨域的问题，而web页面调用js文件不存在跨域问题，并且带有src属性的标签具有跨域能力。<br>于是就想到了在获取服务端数据的时候，服务端把要返回的数据放在一个js格式的文件里面，客户端调用<br>恰巧JSON这种字符串数据格式不仅常用来描述数据，而且被js原生支持<br>于是最后的方案就是客户端调用服务端的JSON文件，服务器要动态生成JSON文件才能把客户端需要的数据装入<br>这种方式就是JSONP，一种非正式的传输协议<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">客户端html代码</span><br><span class="line">&lt;html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 得到航班信息查询结果后的回调函数</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> flightHandler = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        alert(<span class="string">&#x27;你查询的航班结果是：票价 &#x27;</span> + data.price + <span class="string">&#x27; 元，&#x27;</span> + <span class="string">&#x27;余票 &#x27;</span> + data.tickets + <span class="string">&#x27; 张。&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> url = <span class="string">&quot;http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&amp;callback=flightHandler&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 创建script标签，设置其属性</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    script.setAttribute(<span class="string">&#x27;src&#x27;</span>, url);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 把script标签加入head，此时调用开始</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>].appendChild(script); </span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">服务端对应文件有一个同名的方法,需要返回的数据作为该方法参数填进来</span><br><span class="line">flightHandler(&#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="string">&quot;CA1998&quot;</span>,</span><br><span class="line">    <span class="string">&quot;price&quot;</span>: <span class="number">1780</span>,</span><br><span class="line">    <span class="string">&quot;tickets&quot;</span>: <span class="number">5</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>如果用jq实现，上文jq章节也有简单提到特殊的参数jsonp，再举个栗子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">            <span class="attr">async</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&quot;</span>,</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&quot;jsonp&quot;</span>,</span><br><span class="line">            <span class="attr">jsonp</span>: <span class="string">&quot;callback&quot;</span>,<span class="comment">//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span></span><br><span class="line">            <span class="attr">jsonpCallback</span>:<span class="string">&quot;flightHandler&quot;</span>,<span class="comment">//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写&quot;?&quot;，jQuery会自动为你处理数据</span></span><br><span class="line">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</span><br><span class="line">                alert(<span class="string">&#x27;您查询到航班信息：票价： &#x27;</span> + json.price + <span class="string">&#x27; 元，余票： &#x27;</span> + json.tickets + <span class="string">&#x27; 张。&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                alert(<span class="string">&#x27;fail&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常见的三种前端发送请求的方式，介绍其使用方法和相关要点。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机" scheme="http://zqyy.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="计网" scheme="http://zqyy.site/tags/%E8%AE%A1%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>ES6</title>
    <link href="http://zqyy.site/2019/03/29/ES6/"/>
    <id>http://zqyy.site/2019/03/29/ES6/</id>
    <published>2019-03-29T07:33:56.000Z</published>
    <updated>2021-08-18T12:16:24.505Z</updated>
    
    <content type="html"><![CDATA[<p>稍微总结一下ES6新语法特性<br><span id="more"></span></p><h4 id="模块化引入"><a href="#模块化引入" class="headerlink" title="模块化引入"></a>模块化引入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> name <span class="keyword">from</span> <span class="string">&quot;xxx&quot;</span>  <span class="comment">//通配符引入所有export的变量， as作用是重命名</span></span><br><span class="line"><span class="keyword">import</span> &#123;a,b,c&#125; <span class="keyword">from</span> <span class="string">&quot;xxx&quot;</span> <span class="comment">//引入指定的变量</span></span><br><span class="line"><span class="keyword">import</span> x <span class="keyword">from</span> <span class="string">&quot;&quot;</span><span class="comment">//没有用*或者&#123;&#125;的，这样写会引入默认export default</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./1.jpg&quot;</span><span class="comment">//模块也可以是图片，js文件，这样直接引入模块的代码，不引入内部成员</span></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">import</span>(<span class="string">&quot;xxx&quot;</span>) <span class="comment">//也支持异步引入，一定要绝对路径，在编译的时候会生成异步的模块，前面带有数字那些文件</span></span><br></pre></td></tr></table></figure><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...展开运算符，把剩余的变量放在一个数组里，只能用于剩下的部分，一直到最后，不可放在中间</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a,b,rest;</span><br><span class="line">  [a,b,...rest]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">  <span class="built_in">console</span>.log(a,b,rest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运用解构赋值，快速交换两个数</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> b=<span class="number">2</span>;</span><br><span class="line">  [a,b]=[b,a];</span><br><span class="line">  <span class="built_in">console</span>.log(a,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">//接受函数返回值</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> a,b;</span><br><span class="line">  [a,b]=f();</span><br><span class="line">  <span class="built_in">console</span>.log(a,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">//选择性接受,用逗号跳过</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> a,b,c;</span><br><span class="line">  [a,,,b]=f();</span><br><span class="line">  <span class="built_in">console</span>.log(a,b);<span class="comment">//打印出来是 1,4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">//只取第一个元素，剩下的存进数组</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> a,b,c;</span><br><span class="line">  [a,,...b]=f();</span><br><span class="line">  <span class="built_in">console</span>.log(a,b); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**对象解构*/</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">&#123;<span class="comment">//前后端交互时，key值一样可以解构出value值</span></span><br><span class="line">  <span class="keyword">let</span> metaData=&#123;</span><br><span class="line">    <span class="attr">title</span>:<span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">    <span class="attr">test</span>:[&#123;</span><br><span class="line">      <span class="attr">title</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">      <span class="attr">desc</span>:<span class="string">&#x27;description&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> &#123;<span class="attr">title</span>:esTitle,<span class="attr">test</span>:[&#123;<span class="attr">title</span>:cnTitle&#125;]&#125;=metaData;</span><br><span class="line">  <span class="built_in">console</span>.log(esTitle,cnTitle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;稍微总结一下ES6新语法特性&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zqyy.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES6" scheme="http://zqyy.site/categories/%E5%89%8D%E7%AB%AF/ES6/"/>
    
    
      <category term="ES6" scheme="http://zqyy.site/tags/ES6/"/>
    
  </entry>
  
</feed>
