<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星辰在上</title>
  
  <subtitle>万物皆虚，万物皆允</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-03T06:17:40.915Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>郑庆义</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ajax,fetch,websocket</title>
    <link href="http://yoursite.com/2019/04/03/ajax-fetch-websocket/"/>
    <id>http://yoursite.com/2019/04/03/ajax-fetch-websocket/</id>
    <published>2019-04-03T06:17:20.000Z</published>
    <updated>2019-04-03T06:17:40.915Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><h4 id="AJAX状态值与状态码区别"><a href="#AJAX状态值与状态码区别" class="headerlink" title="AJAX状态值与状态码区别"></a>AJAX状态值与状态码区别</h4><blockquote><p>AJAX状态值是指，运行AJAX所经历过的几种状态，无论访问是否成功都将响应的步骤，可以理解成为AJAX运行步骤。如：正在发送，正在响应等，由AJAX对象与服务器交互时所得；使用“ajax.readyState”获得。（由数字1~4单位数字组成）</p></blockquote><blockquote><p>AJAX状态码是指，无论AJAX访问是否成功，由HTTP协议根据所提交的信息，服务器所返回的HTTP头信息代码，该信息使用“ajax.status”所获得；（由数字1XX,2XX三位数字组成，详细查看RFC）<br>这就是我们在使用AJAX时为什么采用下面的方式判断所获得的信息是否正确的原因。</p></blockquote><h4 id="Ajax写法"><a href="#Ajax写法" class="headerlink" title="Ajax写法"></a>Ajax写法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举个例子,原生写法</span></span><br><span class="line"><span class="comment">//如果是post请求，json数据写在send()</span></span><br><span class="line"> <span class="keyword">let</span> ajax=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        ajax.open(<span class="string">'GET'</span>, <span class="string">'http://localhost:8080/a'</span>, <span class="literal">true</span>);</span><br><span class="line">        ajax.send();</span><br><span class="line">        ajax.onreadystatechange=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(ajax.readyState==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ajax.status&gt;=<span class="number">200</span> &amp;&amp; ajax.status&lt;<span class="number">300</span> || ajax.status==<span class="number">304</span>)&#123;</span><br><span class="line">              alert(<span class="string">'成功'</span>);</span><br><span class="line">              <span class="keyword">let</span> json=<span class="built_in">JSON</span>.parse(ajax.responseText);</span><br><span class="line">              <span class="built_in">console</span>.log(json);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              alert(<span class="string">'失败'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JQ的写法</span></span><br><span class="line"><span class="comment">//url,type,data必备，dataType默认是json，</span></span><br><span class="line"><span class="comment">//如果是发送jsonp数据，额外加一个jsonp:"cb"，值是回调函数的名字</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"http://xxxx"</span>,</span><br><span class="line">type:<span class="string">'post'</span></span><br><span class="line">data:&#123;<span class="attr">wd</span>:<span class="string">'xxx'</span>&#125;,</span><br><span class="line">dataType:<span class="string">'text/json/jsonp'</span>,</span><br><span class="line">jsonp:<span class="string">'cb'</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">&#123;s&#125;</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//成功执行函数</span></span><br><span class="line">&#125; , res =&gt;&#123;</span><br><span class="line">    <span class="comment">//失败执行函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="AJAX运行步骤与状态值说明"><a href="#AJAX运行步骤与状态值说明" class="headerlink" title="AJAX运行步骤与状态值说明"></a>AJAX运行步骤与状态值说明</h4><blockquote><p>在AJAX实际运行当中，对于访问XMLHttpRequest（XHR）时并不是一次完成的，而是分别经历了多种状态后取得的结果，对于这种状态在AJAX中共有5种，分别是。</p><ul><li>0 - (未初始化)还没有调用send()方法</li><li>1 - (载入)已调用send()方法，正在发送请求</li><li>2 - (载入完成)send()方法执行完成，</li><li>3 - (交互)正在解析响应内容</li><li>4 - (完成)响应内容解析完成，可以在客户端调用了<br>对于上面的状态，其中“0”状态是在定义后自动具有的状态值，而对于成功访问的状态（得到信息）我们大多数采用“4”进行判断。</li></ul></blockquote><h4 id="AJAX状态码-经常说的服务器status-说明"><a href="#AJAX状态码-经常说的服务器status-说明" class="headerlink" title="AJAX状态码(经常说的服务器status)说明"></a>AJAX状态码(经常说的服务器status)说明</h4><ul><li>1**：请求收到，继续处理</li><li>2**：操作成功收到，分析、接受</li><li>3**：完成此请求必须进一步处理</li><li>4**：请求包含一个错误语法或不能完成</li></ul><ul><li>5**：服务器执行一个完全有效请求失败</li><li>100——客户必须继续发出请求</li></ul><h3 id="fetch使用"><a href="#fetch使用" class="headerlink" title="fetch使用"></a>fetch使用</h3><p>1、 先获取 let res = await fetch(‘xxxx.jpg’)<br><br>2、 再解析 await res.text()/json()/blob()<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个栗子</span></span><br><span class="line"><span class="comment">//如果是fetch一个二进制文件，res.blob()之后要用 URL.createObjectURL生成一个url才能用</span></span><br><span class="line"><span class="built_in">window</span>.onload= <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</span><br><span class="line"><span class="keyword">let</span> img1 = <span class="built_in">document</span>.getElementById(<span class="string">'img1'</span>)</span><br><span class="line">            oBtn.onclick = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> res = <span class="keyword">await</span> fetch(<span class="string">'./1.jpg'</span>)</span><br><span class="line">                <span class="keyword">let</span> data = <span class="keyword">await</span> res.blob(res)</span><br><span class="line">                <span class="keyword">let</span> url = URL.createObjectURL(data)</span><br><span class="line">                img1.src = url;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h3 id="Ajax2-0"><a href="#Ajax2-0" class="headerlink" title="Ajax2.0"></a>Ajax2.0</h3><p><i>主要是formdata的使用</i><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="comment">//原生js获取表单元素传入 </span></span><br><span class="line"><span class="keyword">let</span> oForm=<span class="built_in">document</span>.querySelector(<span class="string">'#form1'</span>);</span><br><span class="line"><span class="keyword">let</span> formdata=<span class="keyword">new</span> FormData(oForm);</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、 <span class="comment">//jq获取表单元素传入</span></span><br><span class="line"> $(<span class="string">'#form1'</span>).on(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> formdata=<span class="keyword">new</span> FormData(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      url: <span class="keyword">this</span>.action,</span><br><span class="line">      type: <span class="keyword">this</span>.method,</span><br><span class="line">      data: formdata,</span><br><span class="line">      processData: <span class="literal">false</span>,<span class="comment">//取消jq默认的数据格式转换</span></span><br><span class="line">      contentType: <span class="literal">false</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      alert(<span class="string">'成功'</span>);</span><br><span class="line">    &#125;, res=&gt;&#123;</span><br><span class="line">      alert(<span class="string">'失败'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、<span class="comment">//生成一个空的FormData对象,用append('key','value')</span></span><br><span class="line"><span class="keyword">let</span> formdata = <span class="keyword">new</span> FormData();</span><br><span class="line">formdata.append(<span class="string">'xxx'</span>,xxxx)</span><br></pre></td></tr></table></figure></p><h3 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h3><h2 id="使用socket-io库实现简单的连接"><a href="#使用socket-io库实现简单的连接" class="headerlink" title="使用socket.io库实现简单的连接"></a>使用socket.io库实现简单的连接</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> io=<span class="built_in">require</span>(<span class="string">'socket.io'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.建立普通http</span></span><br><span class="line"><span class="keyword">let</span> server=http.createServer(<span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;&#125;);</span><br><span class="line">server.listen(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.建立ws</span></span><br><span class="line"><span class="keyword">let</span> wsServer=io.listen(server);</span><br><span class="line">wsServer.on(<span class="string">'connection'</span>, sock=&gt;&#123;</span><br><span class="line">  <span class="comment">//sock.emit('name', 数据)</span></span><br><span class="line">  <span class="comment">//sock.on('name', function (数据)&#123;&#125;);</span></span><br><span class="line"></span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    sock.emit(<span class="string">'timer'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime());</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span> dir=<span class="string">"ltr"</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">"http://localhost:8080/socket.io/socket.io.js"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> sock=io.connect(<span class="string">'ws://localhost:8080/'</span>);</span><br><span class="line">    sock.on(<span class="string">'timer'</span>, time=&gt;&#123;</span><br><span class="line">      <span class="built_in">console</span>.slog(time);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Ajax&quot;&gt;&lt;a href=&quot;#Ajax&quot; class=&quot;headerlink&quot; title=&quot;Ajax&quot;&gt;&lt;/a&gt;Ajax&lt;/h3&gt;&lt;h4 id=&quot;AJAX状态值与状态码区别&quot;&gt;&lt;a href=&quot;#AJAX状态值与状态码区别&quot; class=&quot;headerlink
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6</title>
    <link href="http://yoursite.com/2019/03/29/ES6/"/>
    <id>http://yoursite.com/2019/03/29/ES6/</id>
    <published>2019-03-29T07:33:56.000Z</published>
    <updated>2019-04-03T06:15:53.892Z</updated>
    
    <content type="html"><![CDATA[<h4 id="模块化引入"><a href="#模块化引入" class="headerlink" title="模块化引入"></a>模块化引入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> name <span class="keyword">from</span> <span class="string">"xxx"</span>  <span class="comment">//通配符引入所有export的变量， as作用是重命名</span></span><br><span class="line"><span class="keyword">import</span> &#123;a,b,c&#125; <span class="keyword">from</span> <span class="string">"xxx"</span> <span class="comment">//引入指定的变量</span></span><br><span class="line"><span class="keyword">import</span> x <span class="keyword">from</span> <span class="string">""</span><span class="comment">//没有用*或者&#123;&#125;的，这样写会引入默认export default</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./1.jpg"</span><span class="comment">//模块也可以是图片，js文件，这样直接引入模块的代码，不引入内部成员</span></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">import</span>(<span class="string">"xxx"</span>) <span class="comment">//也支持异步引入，一定要绝对路径，在编译的时候会生成异步的模块，前面带有数字那些文件</span></span><br></pre></td></tr></table></figure><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...展开运算符，把剩余的变量放在一个数组里，只能用于剩下的部分，一直到最后，不可放在中间</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a,b,rest;</span><br><span class="line">  [a,b,...rest]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">  <span class="built_in">console</span>.log(a,b,rest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运用解构赋值，快速交换两个数</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> b=<span class="number">2</span>;</span><br><span class="line">  [a,b]=[b,a];</span><br><span class="line">  <span class="built_in">console</span>.log(a,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">//接受函数返回值</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> a,b;</span><br><span class="line">  [a,b]=f();</span><br><span class="line">  <span class="built_in">console</span>.log(a,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">//选择性接受,用逗号跳过</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> a,b,c;</span><br><span class="line">  [a,,,b]=f();</span><br><span class="line">  <span class="built_in">console</span>.log(a,b);<span class="comment">//打印出来是 1,4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">//只取第一个元素，剩下的存进数组</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> a,b,c;</span><br><span class="line">  [a,,...b]=f();</span><br><span class="line">  <span class="built_in">console</span>.log(a,b); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**对象解构*/</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">&#123;<span class="comment">//前后端交互时，key值一样可以解构出value值</span></span><br><span class="line">  <span class="keyword">let</span> metaData=&#123;</span><br><span class="line">    title:<span class="string">'abc'</span>,</span><br><span class="line">    test:[&#123;</span><br><span class="line">      title:<span class="string">'test'</span>,</span><br><span class="line">      desc:<span class="string">'description'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> &#123;<span class="attr">title</span>:esTitle,<span class="attr">test</span>:[&#123;<span class="attr">title</span>:cnTitle&#125;]&#125;=metaData;</span><br><span class="line">  <span class="built_in">console</span>.log(esTitle,cnTitle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;模块化引入&quot;&gt;&lt;a href=&quot;#模块化引入&quot; class=&quot;headerlink&quot; title=&quot;模块化引入&quot;&gt;&lt;/a&gt;模块化引入&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>正则表达(后续再补充)</title>
    <link href="http://yoursite.com/2019/03/29/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE-%E5%90%8E%E7%BB%AD%E5%86%8D%E8%A1%A5%E5%85%85/"/>
    <id>http://yoursite.com/2019/03/29/正则表达-后续再补充/</id>
    <published>2019-03-29T07:31:38.000Z</published>
    <updated>2019-03-29T07:33:24.710Z</updated>
    
    <content type="html"><![CDATA[<p>写法两种<br>js 风格的是</p><p>let reg = new RegExp(‘\d+’,’g’)</p><p>perl 风格的是<br>let reg = /\d+/g;</p><p>/正则表达式主体/修饰符(可选)</p><p>在 JavaScript 中，正则表达式通常用于两个字符串方法 : search() 和 replace()。<br>其他方法test()返回boolean</p><ul><li><p>search() 方法 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。</p></li><li><p>replace() 方法 用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</p></li></ul><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>大小写不敏感</td></tr><tr><td>g</td><td>全局匹配</td></tr><tr><td>m</td><td>多行匹配</td></tr><tr><td>y</td><td>全局匹配，但是在上一次匹配后紧跟着的下一个开始</td></tr><tr><td>u</td><td>正则表达式中有大于两个字节的情况加</td></tr></tbody></table><p>最常用i,g</p><blockquote><p>es6中<br>flags属性可以获得修饰符<br>sticky属性可以判断是否使用y修饰，返回boolean</p></blockquote><p>处理的正则表达式中有大于两个字节的，要加修饰符u<br>es5中的 /^.$/ 可匹配任意字符，在es6中要加u才能识别超过两个字节的，但是换行回车行分隔段分隔这四个点(.)也不能匹配</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写法两种&lt;br&gt;js 风格的是&lt;/p&gt;
&lt;p&gt;let reg = new RegExp(‘\d+’,’g’)&lt;/p&gt;
&lt;p&gt;perl 风格的是&lt;br&gt;let reg = /\d+/g;&lt;/p&gt;
&lt;p&gt;/正则表达式主体/修饰符(可选)&lt;/p&gt;
&lt;p&gt;在 JavaScript 
      
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>小程序初体验</title>
    <link href="http://yoursite.com/2019/03/29/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2019/03/29/小程序初体验/</id>
    <published>2019-03-29T07:30:35.000Z</published>
    <updated>2019-03-29T07:31:02.209Z</updated>
    
    <content type="html"><![CDATA[<h4 id="小程序版本分为"><a href="#小程序版本分为" class="headerlink" title="小程序版本分为"></a>小程序版本分为</h4><p>预览版本 开发版本 体验版本 审核版本 线上版本</p><h4 id="js在不同地方的构成"><a href="#js在不同地方的构成" class="headerlink" title="js在不同地方的构成"></a>js在不同地方的构成</h4><p>浏览器是 ECMAScript NPM DOM BOM<br>NodeJS中 ECMAScript NPM Native<br>小程序中 ECMAScript 小程序框架 小程序API</p><h4 id="App构造器的参数"><a href="#App构造器的参数" class="headerlink" title="App构造器的参数"></a>App构造器的参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">App(&#123;</span><br><span class="line">  onLaunch: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;&#125;,</span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;&#125;,</span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  onError: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;&#125;,</span><br><span class="line">  globalData: <span class="string">'I am global data'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="C3E1CAB28658419DB22CBB686B380E11" alt="image"></p><table><thead><tr><th>场景值</th><th>场景</th><th>appId信息含义</th></tr></thead><tbody><tr><td>1020</td><td>profile</td><td>页相关小程序列表 返回来源公众号 appId</td></tr><tr><td>1035</td><td>公众号自定义菜单</td><td>返回来源公众号appId</td></tr><tr><td>1036</td><td>App 分享消息卡片</td><td>返回来源应用appId</td></tr><tr><td>1037</td><td>小程序打开小程序</td><td>返回来源小程序 appId</td></tr><tr><td>1038</td><td>从另一个小程序返回</td><td>返回来源小程序 appId</td></tr><tr><td>1043</td><td>公众号模板消息</td><td>返回来源公众号 appId</td></tr></tbody></table><h4 id="全局数据"><a href="#全局数据" class="headerlink" title="全局数据"></a>全局数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line">App(&#123;</span><br><span class="line">  globalData: <span class="string">'I am global data'</span> <span class="comment">// 全局共享数据</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 其他页面脚本other.js</span></span><br><span class="line"><span class="keyword">var</span> appInstance = getApp()</span><br><span class="line"><span class="built_in">console</span>.log(appInstance.globalData) <span class="comment">// 输出: I am global data</span></span><br></pre></td></tr></table></figure><p>所有页面的脚本逻辑都跑在同一个JsCore线程，页面使用setTimeout或者setInterval的定时器，然后跳转到其他页面时，这些定时器并没有被清除，需要开发者自己在页面离开的时候进行清理。</p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><blockquote><p>页面初次加载的时候，微信客户端就会给Page实例派发onLoad事件，Page构造器参数所定义的onLoad方法会被调用，onLoad在页面没被销毁之前只会触发1次，在onLoad的回调中，可以获取当前页面所调用的打开参数option，关于打开参数我们放在这一节的最后再展开阐述。<br>页面显示之后，Page构造器参数所定义的onShow方法会被调用，一般从别的页面返回到当前页面时，当前页的onShow方法都会被调用。<br>在页面初次渲染完成时，Page构造器参数所定义的onReady方法会被调用，onReady在页面没被销毁前只会触发1次，onReady触发时，表示页面已经准备妥当，在逻辑层就可以和视图层进行交互了。<br>以上三个事件触发的时机是onLoad早于 onShow，onShow早于onReady<br>页面不可见时，Page构造器参数所定义的onHide方法会被调用，这种情况会在使用wx.navigateTo切换到其他页面、底部tab切换时触发。<br>当前页面使用wx.redirectTo或wx.navigateBack返回到其他页时，当前页面会被微信客户端销毁回收，此时Page构造器参数所定义的onUnload方法会被调用。</p></blockquote><h4 id="打开参数"><a href="#打开参数" class="headerlink" title="打开参数"></a>打开参数</h4><p>页面Page构造器里onLoad的option可以拿到当前页面的打开参数，其类型是一个Object，其键值对与页面URL上query键值对一一对应</p><h4 id="常见的事件类型"><a href="#常见的事件类型" class="headerlink" title="常见的事件类型"></a>常见的事件类型</h4><table><thead><tr><th>类型</th><th>触发条件</th></tr></thead><tbody><tr><td>touchstart</td><td>手指触摸动作开始</td></tr><tr><td>touchmove</td><td>手指触摸后移动</td></tr><tr><td>touchcancel</td><td>手指触摸动作被打断，如来电提醒，弹窗</td></tr><tr><td>touchend</td><td>手指触摸动作结束</td></tr><tr><td>tap</td><td>手指触摸后马上离开</td></tr><tr><td>longpress</td><td>手指触摸后，超过350ms再离开，如果指定了事件回调函数并触发了这个事件，tap事件将不被触发</td></tr><tr><td>longtap</td><td>手指触摸后，超过350ms再离开（推荐使用longpress事件代替）</td></tr><tr><td>transitionend</td><td>会在 WXSS transition 或 wx.createAnimation 动画结束后触发</td></tr><tr><td>animationstart</td><td>会在一个 WXSS animation 动画开始时触发</td></tr><tr><td>animationiteration</td><td>会在一个 WXSS animation 一次迭代结束时触发</td></tr><tr><td>animationend</td><td>会在一个 WXSS animation 动画完成时触发</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;小程序版本分为&quot;&gt;&lt;a href=&quot;#小程序版本分为&quot; class=&quot;headerlink&quot; title=&quot;小程序版本分为&quot;&gt;&lt;/a&gt;小程序版本分为&lt;/h4&gt;&lt;p&gt;预览版本 开发版本 体验版本 审核版本 线上版本&lt;/p&gt;
&lt;h4 id=&quot;js在不同地方的构成&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>关于$emit</title>
    <link href="http://yoursite.com/2018/11/26/%E5%85%B3%E4%BA%8E$emit/"/>
    <id>http://yoursite.com/2018/11/26/关于$emit/</id>
    <published>2018-11-26T11:46:08.000Z</published>
    <updated>2018-11-26T12:15:00.990Z</updated>
    
    <content type="html"><![CDATA[<h2 id="emit"><a href="#emit" class="headerlink" title="$emit"></a>$emit</h2><p>1、父组件可以使用 props 把数据传给子组件。<br>2、子组件可以使用 $emit 触发父组件的自定义事件。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ratingselect</span> @<span class="attr">select-type</span>=<span class="string">"onSelectType"</span>&gt;</span><span class="tag">&lt;/<span class="name">ratingselect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    data () &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">        selectType: 0,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      onSelectType (type) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.selectType = type</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>父组件使用@select-type=”onSelectType”监听由子组件vm.$emit触发的事件，通过onSelectType()接受从子组件传递过来的数据，通知父组件数据改变了。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//子组件</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"select(0, $event)"</span>  <span class="attr">:class</span>=<span class="string">"&#123;'active': selectType===0&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"select(1, $event)"</span>  <span class="attr">:class</span>=<span class="string">"&#123;'active': selectType===1&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"select(2, $event)"</span>  <span class="attr">:class</span>=<span class="string">"&#123;'active': selectType===2&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    data () &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">        selectType: 0,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">        select (type, event) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.selectType = type</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$emit(<span class="string">'select-type'</span>, type)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>子组件通过$emit来触发事件，将参数传递出去。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;emit&quot;&gt;&lt;a href=&quot;#emit&quot; class=&quot;headerlink&quot; title=&quot;$emit&quot;&gt;&lt;/a&gt;$emit&lt;/h2&gt;&lt;p&gt;1、父组件可以使用 props 把数据传给子组件。&lt;br&gt;2、子组件可以使用 $emit 触发父组件的自定义事件。&lt;br
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>关于vue里面scoped</title>
    <link href="http://yoursite.com/2018/11/21/%E5%85%B3%E4%BA%8Evue%E9%87%8C%E9%9D%A2scoped/"/>
    <id>http://yoursite.com/2018/11/21/关于vue里面scoped/</id>
    <published>2018-11-21T03:11:38.000Z</published>
    <updated>2018-11-26T12:15:11.985Z</updated>
    
    <content type="html"><![CDATA[<p>前期概要：在开发这个B2B的时候，在引用其中一位开发者写的组件时，出现了样式上的崩坏，结合之前翻阅文档得出是scoped的问题<br><a id="more"></a></p><h2 id="scoped作用"><a href="#scoped作用" class="headerlink" title="scoped作用"></a>scoped作用</h2><p>在vue组件中，在style标签上添加scoped属性，vue通过在DOM结构以及css样式上加唯一不重复的标记，以保证唯一，达到样式私有化模块化的目的，很好的实现了样式私有化的目的。但是之后如果对公共组件样式做调整，如果添加了scoped属性，那么样式将会变得不易修改。本次就出现了这样的问题，因为父子组件中用到了同样的类名</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//button.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"button-warp"</span>&gt;</span><br><span class="line">        &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"button"</span>&gt;text&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">    .button-warp&#123;</span></span><br><span class="line"><span class="regexp">        display:inline-block;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    .button&#123;</span></span><br><span class="line"><span class="regexp">        padding: 5px 10px;</span></span><br><span class="line"><span class="regexp">        font-size: 12px;</span></span><br><span class="line"><span class="regexp">        border-radus: 2px;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染之后html </span></span><br><span class="line">&lt;div data-v<span class="number">-2311</span>c06a <span class="class"><span class="keyword">class</span></span>=<span class="string">"button-warp"</span>&gt;</span><br><span class="line">    &lt;button data-v<span class="number">-2311</span>c06a <span class="class"><span class="keyword">class</span></span>=<span class="string">"button"</span>&gt;text&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染之后css</span></span><br><span class="line">.button-warp[data-v<span class="number">-2311</span>c06a]&#123;</span><br><span class="line">    display:inline-block;</span><br><span class="line">&#125;</span><br><span class="line">.button[data-v<span class="number">-2311</span>c06a]&#123;</span><br><span class="line">    padding: <span class="number">5</span>px <span class="number">10</span>px;</span><br><span class="line">    font-size: <span class="number">12</span>px;</span><br><span class="line">    border-radus: <span class="number">2</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时用一个组件引用<button></button><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//content.vue文件里面模板</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"content"</span>&gt;</span><br><span class="line">    &lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"title"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &lt;!-- v-button假设是上面定义的组件 --&gt;</span><br><span class="line">    &lt;div data-v<span class="number">-2311</span>c06a <span class="class"><span class="keyword">class</span></span>=<span class="string">"button-warp"</span>&gt;</span><br><span class="line">        &lt;button data-v<span class="number">-2311</span>c06a <span class="class"><span class="keyword">class</span></span>=<span class="string">"button"</span>&gt;text&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/渲染出来的html</span></span><br><span class="line"><span class="regexp">&lt;div data-v-57bc25a0 class="content"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p data-v-57bc25a0 class="title"&gt;&lt;/</span>p&gt;</span><br><span class="line">    &lt;!-- v-button假设是上面定义的组件 --&gt;</span><br><span class="line">    &lt;div data-v<span class="number">-57</span>bc25a0 data-v<span class="number">-2311</span>c06a <span class="class"><span class="keyword">class</span></span>=<span class="string">"button-warp"</span>&gt;</span><br><span class="line">        &lt;button data-v<span class="number">-2311</span>c06a <span class="class"><span class="keyword">class</span></span>=<span class="string">"button"</span>&gt;text&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/渲染出来的css</span></span><br><span class="line"><span class="regexp">.button-warp[data-v-2311c06a]&#123;</span></span><br><span class="line"><span class="regexp">    display:inline-block;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">.button[data-v-2311c06a]&#123;</span></span><br><span class="line"><span class="regexp">    padding: 5px 10px;</span></span><br><span class="line"><span class="regexp">    font-size: 12px;</span></span><br><span class="line"><span class="regexp">    border-radus: 2px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span>*content.vue渲染出来的css*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">.content[data-v-57bc25a0]&#123;</span></span><br><span class="line"><span class="regexp">    width: 1200px;</span></span><br><span class="line"><span class="regexp">    margin: 0 auto;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">.content .button[data-v-57bc25a0]&#123;</span></span><br><span class="line"><span class="regexp">    border-raduis: 5px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>虽然我们在content添加了想要修改button组件的样式的代码，但是由于.content .button这句在末尾加的是content组件的scoped标记，最后这句其实根本作用不到我们想要的DOM节点上，所以这种情况我们在content内部写的任何样式都不会影响到button.vue组件，</p><h2 id="总结scoped原理"><a href="#总结scoped原理" class="headerlink" title="总结scoped原理"></a>总结scoped原理</h2><p>1、给HTML的DOM节点加一个不重复data属性(形如：data-v-2311c06a)来表示他的唯一性</p><p>2、在每句css选择器的末尾（编译后的生成的css语句）加一个当前组件的data属性选择器（如[data-v-2311c06a]）来私有化样式</p><p>3、<strong>如果组件内部包含有其他组件，只会给<font color="red">其他组件</font> 的最外层标签加上当前组件的data属性</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前期概要：在开发这个B2B的时候，在引用其中一位开发者写的组件时，出现了样式上的崩坏，结合之前翻阅文档得出是scoped的问题&lt;br&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>11.5-11.11学习笔记</title>
    <link href="http://yoursite.com/2018/11/12/11-5-11-11%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/11/12/11-5-11-11学习笔记/</id>
    <published>2018-11-11T16:54:03.000Z</published>
    <updated>2019-03-29T07:40:18.260Z</updated>
    
    <content type="html"><![CDATA[<p><del>稍等</del></p><p>你们等不到了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;del&gt;稍等&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;你们等不到了&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>第八周学习报告</title>
    <link href="http://yoursite.com/2018/10/30/10.29-11.4%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/10/30/10.29-11.4学习笔记/</id>
    <published>2018-10-30T02:39:13.000Z</published>
    <updated>2018-11-11T16:54:09.612Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JQ"><a href="#JQ" class="headerlink" title="JQ"></a>JQ</h3><p>把JQ补完了，JQ插件那块了解了下，用起来不复杂，很方便，以下随便提取几点</p><ul><li><p>jQuery 入口函数与 JavaScript 入口函数的区别：<br>jQuery 的入口函数是在 html 所有标签(DOM)都加载之后，就会去执行。</p></li><li><p>JavaScript 的 window.onload 事件是等到所有内容，包括外部图片之类的文件加载完后，才会执行。<br>引入文件写在head</p></li></ul><ul><li>$(‘#p1’).toggle(speed,callback);<br>1.$(selector)选中的元素的个数为n个，则callback函数会执行n次；<br>2.callback函数名后加括号，会立刻执行函数体，而不是等到显示/隐藏完成后才执行；<br>3.callback既可以是函数名，也可以是匿名函数；</li></ul><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>这已经是第三次回顾闭包了，第一次是直接学的时候，第二次是看王福朋的博客，第三次是看了成哥的教学</p><p>闭包出现的情况：内部函数被保存到外部，产生闭包，导致原有的作用域链不被释放，造成内存泄漏</p><p>或者说闭包就是一个函数引用另外一个函数的变量，因为变量被引用着所以不会被回收，因此可以用来封装一个私有变量。这是优点也是缺点，不必要的闭包只会徒增内存消耗</p><ul><li>下面是一道见过无数次的陷阱题<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunctions</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        result[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> funcs = createFunctions();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; funcs.length; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(funcs[i]());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>输出结果大家都知道了是10个10，具体来讲陷阱就是：函数带()才是执行函数！ 单纯的一句 var f = function() { alert(‘ABC’); }; 是不会弹窗的，后面接一句 f(); 才会执行函数内部的代码。</p><h3 id="有关eval-这个函数"><a href="#有关eval-这个函数" class="headerlink" title="有关eval()这个函数"></a>有关eval()这个函数</h3><p>这个函数见过几次，虽然按道理不常用，但是还是查了一下</p><p>1eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。</p><p>2eval()解析JSON字符串为函数-</p><p>为什么要 eval这里要添加 “(“(“+data+”)”);//”呢？</p><p>原因在于：eval本身的问题。 由于json是以”{}”的方式来开始以及结束的，在JS中，它会被当成一个语句块来处理，所以必须强制性的将它转换成一种表达式。</p><p>加上圆括号的目的是迫使eval函数在处理JavaScript代码的时候强制将 括号内的表达式（expression）转化为对象，而不是作为语 句（statement）来执行。举一个例子，例如对象字面量{}，如若不加外层的括号，那么eval会将大括号识别为JavaScript代码块的开始 和结束标记，那么{}将会被认为是执行了一句空语句。所以下面两个执行结果是不同的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="built_in">eval</span>(<span class="string">"&#123;&#125;"</span>); <span class="comment">// return undefined</span></span><br><span class="line">alert(<span class="built_in">eval</span>(<span class="string">"(&#123;&#125;)"</span>);<span class="comment">// return object[Object]</span></span><br></pre></td></tr></table></figure></p><h3 id="正则去除中文"><a href="#正则去除中文" class="headerlink" title="正则去除中文"></a>正则去除中文</h3><p>有人突然问到的，看看</p><p>验证中文<br>^[\u4e00-\u9fa5]+$</p><p>验证字母<br>^[a-zA-Z]+$</p><p>验证数字<br>^[0-9]+$</p><p>中文，字母，数字组成的字符串，不要求三者同时出现^[a-zA-Z0-9\u4e00-\u9fa5]+$</p><p>\u4e00-\u9fa5这两个unicode值正好是Unicode表中的汉字的头和尾。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JQ&quot;&gt;&lt;a href=&quot;#JQ&quot; class=&quot;headerlink&quot; title=&quot;JQ&quot;&gt;&lt;/a&gt;JQ&lt;/h3&gt;&lt;p&gt;把JQ补完了，JQ插件那块了解了下，用起来不复杂，很方便，以下随便提取几点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;jQuery 入口函数与 Jav
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>css3动画三属性</title>
    <link href="http://yoursite.com/2018/10/21/css3%E5%8A%A8%E7%94%BB%E4%B8%89%E5%B1%9E%E6%80%A7/"/>
    <id>http://yoursite.com/2018/10/21/css3动画三属性/</id>
    <published>2018-10-21T03:21:49.000Z</published>
    <updated>2018-10-21T03:25:18.767Z</updated>
    
    <content type="html"><![CDATA[<p>把css3里与动画有关的三个常见属性归纳到一起<br><a id="more"></a></p><h2 id="CSS3制作动画的几个属性：变形-transform-、转换-transition-和动画-animation"><a href="#CSS3制作动画的几个属性：变形-transform-、转换-transition-和动画-animation" class="headerlink" title="CSS3制作动画的几个属性：变形(transform)、转换(transition)和动画(animation)"></a>CSS3制作动画的几个属性：变形(transform)、转换(transition)和动画(animation)</h2><h3 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h3><p>transition主要包含四个属性值：<br>1、执行变换的属性：transition-property<br>2、变换延续的时间：transition-duration<br>3、延续时间内变换的速率：transition-timing-function<br>4、变换延迟时间：transition-delay.</p><h4 id="transition-property"><a href="#transition-property" class="headerlink" title="transition-property"></a>transition-property</h4><p>指定当元素其中一个属性改变时执行transition效果，其主要有以下几个值：none(没有属性改变)；all（所有属性改变）这个也是其默认值；indent（元素属性名）</p><h4 id="transition-duration"><a href="#transition-duration" class="headerlink" title="transition=duration"></a>transition=duration</h4><p>默认值0，也就是即时。设一个延续时间单位s或者ms</p><h4 id="transition-timing-function"><a href="#transition-timing-function" class="headerlink" title="transition-timing-function"></a>transition-timing-function</h4><p>ease 逐渐变慢<br>linear 匀速<br>ease-in 加速<br>ease-out 减速<br>ease-in-out 先加速后减速<br>cubic-bezier 自定义时间曲线</p><h4 id="transition-delay"><a href="#transition-delay" class="headerlink" title="transition-delay"></a>transition-delay</h4><p>默认值0，也就是即时。设一个延迟时间单位s或者ms</p><p>随便一个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a &#123;</span><br><span class="line">  -moz-transition: all <span class="number">0.5</span>s ease-<span class="keyword">in</span>;</span><br><span class="line">  -webkit-transition: all <span class="number">0.5</span>s ease-<span class="keyword">in</span>;</span><br><span class="line">  -o-transition: all <span class="number">0.5</span>s ease-<span class="keyword">in</span>;</span><br><span class="line">  transition: all <span class="number">0.5</span>s ease-<span class="keyword">in</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><p>主要包括以下几种：旋转rotate、移动translate、扭曲skew、缩放scale以及矩阵变形matrix<br>有一点要注意的 在这里叠加多个属性是用空格分开而不是逗号</p><p>通过指定的角度参数进行2D旋转，设置的是正数为顺时针旋转，负的为逆时针旋转，例如<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">transform:rotate(<span class="number">30</span>deg)</span><br><span class="line">transform:translateX(<span class="number">100</span>px):</span><br><span class="line">transform:skew(<span class="number">30</span>deg,<span class="number">10</span>deg):</span><br><span class="line">transform:scale(<span class="number">2</span>,<span class="number">1.5</span>):</span><br></pre></td></tr></table></figure></p><h3 id="animate"><a href="#animate" class="headerlink" title="animate"></a>animate</h3><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">说明</th><th style="text-align:left">随便备注</th></tr></thead><tbody><tr><td style="text-align:left">animation-name</td><td style="text-align:left">指定@keyframes的名字</td></tr><tr><td style="text-align:left">animation-duration</td><td style="text-align:left">动画指定需要多少秒或毫秒完成</td><td style="text-align:left">0表示无动画，单位可以设s秒或ms毫秒</td></tr><tr><td style="text-align:left">animation-timing-function</td><td style="text-align:left">规定动画的速度曲线</td><td style="text-align:left">ease-in-out、linear等</td></tr><tr><td style="text-align:left">animation-delay</td><td style="text-align:left">规定在动画开始之前的延迟。</td><td style="text-align:left">默认值是0，立即播放动画，设负值表示跳过-2s</td></tr><tr><td style="text-align:left">animation-iteration-count</td><td style="text-align:left">定义动画的播放次数。</td><td style="text-align:left">默认是1，可以设置无限循环infinite</td></tr><tr><td style="text-align:left">animation-direction</td><td style="text-align:left">动画播放的方向</td><td style="text-align:left">normal正常播放，alternate正方向轮转，alternate-reverse与前者相反</td></tr><tr><td style="text-align:left">animation-play-state</td><td style="text-align:left">动画的状态</td><td style="text-align:left">可以设running正在播放,pause暂停动画，通常在JS使用该属性object.style.animationPlayState=”paused”来暂停动画。</td></tr><tr><td style="text-align:left">animation-fill-mode</td><td style="text-align:left">动画时间外属性</td><td style="text-align:left">可设none，forwards，backwards，both，默认值none表示动画播完后，恢复到初始状态，forwards当动画播完后，保持@keyframes里最后一帧的属性。backwards表示开始播动画前(也就是delay时间内)，应用@keyframes里第一帧的属性，both表示forwards和backforwards都应用。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;把css3里与动画有关的三个常见属性归纳到一起&lt;br&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>10_14笔记</title>
    <link href="http://yoursite.com/2018/10/14/10-14%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/10/14/10-14笔记/</id>
    <published>2018-10-14T03:27:26.000Z</published>
    <updated>2018-10-21T04:18:51.457Z</updated>
    
    <content type="html"><![CDATA[<p>行级元素只能嵌套行级，块级可以嵌套任何，但是有特殊的↓<br>p标签是块级的，但是嵌套了div进去后，p会被切成两半<br>a标签不能嵌套a标签</p><p>设了absolute和float后 内部元素会变成inline-block（和手动设置display:inline-block再可以对行级元素设宽高一样</p><p>文本类元素一旦里面有了文字，外部文字就会和里面的对齐</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;行级元素只能嵌套行级，块级可以嵌套任何，但是有特殊的↓&lt;br&gt;p标签是块级的，但是嵌套了div进去后，p会被切成两半&lt;br&gt;a标签不能嵌套a标签&lt;/p&gt;
&lt;p&gt;设了absolute和float后 内部元素会变成inline-block（和手动设置display:inline
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>10_13笔记</title>
    <link href="http://yoursite.com/2018/10/13/10-13%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/10/13/10-13笔记/</id>
    <published>2018-10-13T03:27:20.000Z</published>
    <updated>2018-10-21T04:17:19.228Z</updated>
    
    <content type="html"><![CDATA[<p>单行文本 height和line-height设为一个值实现单行文本居中</p><p>文本溢出处理三件套<br>white-space:nowrap;文本溢出不换行<br>overflow:hidden;<br>text-overflow:ellipsis;//省略号</p><p>多行文本溢出处理，PC端没有很好的解决方法，手动打点，截断overflow：hidden</p><p>使用css添加图片时，如果网络不佳，为了应对浏览器默认加载策略(在网速不好的时候会不加载CSS JS)，这个时候采取两种方法</p><p>1、text-indent一定距离让文字跟在图片后，white-space:nowrap,overflow:hidden<br>2、取消图片的height 用padding-top代替 用padding撑开div，再设overflow:hidden</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;单行文本 height和line-height设为一个值实现单行文本居中&lt;/p&gt;
&lt;p&gt;文本溢出处理三件套&lt;br&gt;white-space:nowrap;文本溢出不换行&lt;br&gt;overflow:hidden;&lt;br&gt;text-overflow:ellipsis;//省略号&lt;/
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>10_12笔记</title>
    <link href="http://yoursite.com/2018/10/12/10-12%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/10/12/10-12笔记/</id>
    <published>2018-10-12T03:27:35.000Z</published>
    <updated>2018-10-21T04:24:01.364Z</updated>
    
    <content type="html"><![CDATA[<p>text-indent : 2em;  首行缩进</p><p>1em=1*font-size </p><p>块级元素独占一行 可以用css改变宽高 而行级元素不能，img是行级块元素 </p><p>初始化ul标签  list-style: none  margin:0  padding:0</p><p>body 天生默认 margin:8px </p><p>定位复习<br>display:absolute  脱离原来位置进行定位，找最近的有定位的父级，没有则相对文档<br>display:relative  保留原来位置进行定位，相对于自己原来的位置定位<br>一般用relative作参照物 用absolute定位</p><p>垂直方向的margin父子嵌套（兄弟结构也会） 取最大的值 这个bug叫做margin塌陷<br>解决方法两个<br>1暴力解法 在父级加一个 border-top:1px solid<br>2使用bfc  但是只是弥补 目前没有一个完美解决的方法</p><p>那么如何触发一个盒子的bfc (block format Context),四种方法<br>position:absolute<br>display:inline-block<br>float:left||right<br>overflow: hidden</p><p>浮动元素产生浮动流，块级元素看不到浮动元素，只有产生了bfc的元素或文本可以看到<br>要取消浮动可以用 伪元素(伪元素天生是行级元素)或bfc</p><p>1可以用伪元素清楚浮动 xx::after{<br>    content:””;<br>    display:block;<br>    clear:both;<br>}<br>2触发bfc<br>原理就是 设了absolute和float后 内部元素会变成inline-block</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;text-indent : 2em;  首行缩进&lt;/p&gt;
&lt;p&gt;1em=1*font-size &lt;/p&gt;
&lt;p&gt;块级元素独占一行 可以用css改变宽高 而行级元素不能，img是行级块元素 &lt;/p&gt;
&lt;p&gt;初始化ul标签  list-style: none  margin:0
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>近期一句话总结</title>
    <link href="http://yoursite.com/2018/09/23/%E8%BF%91%E6%9C%9F%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/09/23/近期一句话总结/</id>
    <published>2018-09-23T02:45:50.000Z</published>
    <updated>2018-09-23T03:11:12.759Z</updated>
    
    <content type="html"><![CDATA[<p>·git checkout practice：新世界是暑期前做的，开学后又进行了细节的修改，因为是第一次做页面，学到的东西还是非常多。之后做了一个打字机小游戏和一个简单的主要利用定时器和工厂实现的动画。<br>·git checkout DOM:日常被各种事情卡住，只有在文学课上才是最专心的。</p><p>·git checkout other：其他一些东西，如每天的网课和英语课。</p><p>·git checkout node：node还是继续之前那些视频资源，群里偶尔也有新暂时没有精力</p><p>·git checkout affair：弄来了两个“优秀的”源码来学习，看看能不能学到啥把阿肥魔改，真的是一堆不成熟的想法+不成熟的技法导致很多问题，9月22日前端们终于突然想起要继续对接了，所以中秋假期又双叒叕还是自己忙前忙后。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;·git checkout practice：新世界是暑期前做的，开学后又进行了细节的修改，因为是第一次做页面，学到的东西还是非常多。之后做了一个打字机小游戏和一个简单的主要利用定时器和工厂实现的动画。&lt;br&gt;·git checkout DOM:日常被各种事情卡住，只有在文
      
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>nodemailer使用回顾</title>
    <link href="http://yoursite.com/2018/09/17/nodemailer%E4%BD%BF%E7%94%A8%E5%9B%9E%E9%A1%BE/"/>
    <id>http://yoursite.com/2018/09/17/nodemailer使用回顾/</id>
    <published>2018-09-17T14:28:58.000Z</published>
    <updated>2018-09-17T14:56:21.599Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> transporter=nodemailer.createTransport(&#123;<span class="comment">//设置邮件传输</span></span><br><span class="line">   <span class="comment">// service: 'qq', service和host二选一，写法不同</span></span><br><span class="line">    host:<span class="string">"smtp.qq.com"</span>, <span class="comment">//设置服务，可以换成smtp.163.com</span></span><br><span class="line">    secureConnection:<span class="literal">true</span>, <span class="comment">//是否使用TLS，如果是true端口为465，否则为其他端口或者568</span></span><br><span class="line">    port:<span class="number">465</span>,          <span class="comment">//SMTP端口</span></span><br><span class="line">    auth:&#123; </span><br><span class="line">        user:<span class="string">"706608189@qq.com"</span>, <span class="comment">//发送人邮箱 </span></span><br><span class="line">        pass:<span class="string">"czvbqzqdnbywbfdd"</span><span class="comment">//我的授权码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sendEmail = <span class="function"><span class="keyword">function</span>(<span class="params">mail,msg,cb</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> mailOption=&#123;</span><br><span class="line">        <span class="keyword">from</span>:<span class="string">"xxxxxx@qq.com"</span>,<span class="comment">//发件人邮箱</span></span><br><span class="line">        to:mail<span class="comment">//收件人邮箱，例如req.body.email,</span></span><br><span class="line">        subject:<span class="string">"注册校验码"</span><span class="comment">//邮件标题</span></span><br><span class="line">        html: <span class="string">'msg'</span><span class="comment">//邮件内容</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">  transporter.sendMail(mailOption,<span class="function"><span class="keyword">function</span>(<span class="params">error,info</span>)</span>&#123;</span><br><span class="line">        cb(error,info); </span><br><span class="line">        <span class="comment">// if(error)&#123;</span></span><br><span class="line">        <span class="comment">//     res.json(&#123;code:400&#125;) ;//发送未成功</span></span><br><span class="line">        <span class="comment">//     return console.info(error);</span></span><br><span class="line">        <span class="comment">// &#125;else&#123;</span></span><br><span class="line">        <span class="comment">//     res.json(&#123;code:200&#125;) ;//发送成功</span></span><br><span class="line">        <span class="comment">//     console.info("Message send");</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    sendEmail:sendEmail</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>pscp操作方法概括</title>
    <link href="http://yoursite.com/2018/09/17/pscp%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95%E6%A6%82%E6%8B%AC/"/>
    <id>http://yoursite.com/2018/09/17/pscp操作方法概括/</id>
    <published>2018-09-17T07:24:10.000Z</published>
    <updated>2018-09-17T07:34:51.403Z</updated>
    
    <content type="html"><![CDATA[<p>虽然是很早以前就掌握的东西了，但是一直懒得整理<br>————————————————————————————</p><h3 id="linux-删除命令"><a href="#linux-删除命令" class="headerlink" title="linux 删除命令"></a>linux 删除命令</h3><p>删除常用操作 rm -rf 目录名字<br>   -r 向下递归，不管有多少级目录，一并删除<br>    -f 直接强行删除，没有任何提示</p><p>注意：使用 rm -rf 的时候一定要小心，Linux没有回收站。</p><h3 id="Linux创建命令"><a href="#Linux创建命令" class="headerlink" title="Linux创建命令"></a>Linux创建命令</h3><p>touch Xxx 创建文件<br>mkdir xxx创建文件夹目录</p><h3 id="ECS"><a href="#ECS" class="headerlink" title="ECS"></a>ECS</h3><p>经过试验<br>如果是删除一个文件 重新上传文件夹后 ECS端的文件还在<br>如果是修改一个文件 重新上传文件夹后 ECS端的文件也会跟着修改 主要是看文件和文件夹的名字</p><p>我自己的ECS的MongoDB 所在地 /usr/local/mongodb/bin</p><h3 id="PSCP"><a href="#PSCP" class="headerlink" title="PSCP"></a>PSCP</h3><p>我自己的例子<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pscp <span class="symbol">D:</span>gitbook root<span class="variable">@47</span>.<span class="number">106.21</span>.<span class="number">195</span><span class="symbol">:/home/wwwroot/default/gitbook</span></span><br><span class="line"></span><br><span class="line">pscp -r <span class="symbol">d:</span>aaa root<span class="variable">@47</span>.<span class="number">106.21</span>.<span class="number">195</span><span class="symbol">:/home</span></span><br></pre></td></tr></table></figure></p><blockquote><p>　-p 拷贝文件的时候保留源文件建立的时间。<br>　　-q 执行文件拷贝时，不显示任何提示消息。<br>　　-r 拷贝整个目录<br>　　-v 拷贝文件时，显示提示信息。 </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虽然是很早以前就掌握的东西了，但是一直懒得整理&lt;br&gt;————————————————————————————&lt;/p&gt;
&lt;h3 id=&quot;linux-删除命令&quot;&gt;&lt;a href=&quot;#linux-删除命令&quot; class=&quot;headerlink&quot; title=&quot;linux 删除命
      
    
    </summary>
    
    
      <category term="ECS" scheme="http://yoursite.com/tags/ECS/"/>
    
  </entry>
  
  <entry>
    <title>linux的vim命令</title>
    <link href="http://yoursite.com/2018/09/17/linux%E7%9A%84vim%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/09/17/linux的vim命令/</id>
    <published>2018-09-17T07:04:49.000Z</published>
    <updated>2018-09-17T07:06:12.472Z</updated>
    
    <content type="html"><![CDATA[<h3 id="进入vi的命令"><a href="#进入vi的命令" class="headerlink" title="进入vi的命令"></a>进入vi的命令</h3><pre><code>vi filename :打开或新建文件,并将光标置于第一行首vi n filename ：打开文件,并将光标置于第n行首vi filename ：打开文件,并将光标置于一行首vi /pattern filename：打开文件,并将光标置于第一个与pattern匹配的串处vi -r filename ：在上次正用vi编辑时发生系统崩溃,恢复filenamevi filename....filename ：打开多个文件,依次进行编辑</code></pre><h3 id="移动光标类命令"><a href="#移动光标类命令" class="headerlink" title="移动光标类命令"></a>移动光标类命令</h3><pre><code>h ：光标左移一个字符l ：光标右移一个字符space：光标右移一个字符Backspace：光标左移一个字符k或Ctrl p：光标上移一行j或Ctrl n ：光标下移一行Enter ：光标下移一行w或W ：光标右移一个字至字首b或B ：光标左移一个字至字首e或E ：光标右移一个字至字尾) ：光标移至句尾( ：光标移至句首}：光标移至段落开头{：光标移至段落结尾nG：光标移至第n行首n ：光标下移n行n-：光标上移n行n$：光标移至第n行尾H ：光标移至屏幕顶行M ：光标移至屏幕中间行L ：光标移至屏幕行0：（注意是数字零）光标移至当前行首$：光标移至当前行尾</code></pre><h3 id="屏幕翻滚类命令"><a href="#屏幕翻滚类命令" class="headerlink" title="屏幕翻滚类命令"></a>屏幕翻滚类命令</h3><pre><code>Ctrl u：向文件首翻半屏Ctrl d：向文件尾翻半屏Ctrl f：向文件尾翻一屏Ctrl＋b；向文件首翻一屏nz：将第n行滚至屏幕顶部,不指定n时将当前行滚至屏幕顶部.</code></pre><h3 id="插入文本类命令"><a href="#插入文本类命令" class="headerlink" title="插入文本类命令"></a>插入文本类命令</h3><pre><code>i ：在光标前I ：在当前行首a：光标后A：在当前行尾o：在当前行之下新开一行O：在当前行之上新开一行r：替换当前字符R：替换当前字符及其后的字符,直至按ESC键s：从当前光标位置处开始,以输入的文本替代指定数目的字符</code></pre><h3 id="保存命令"><a href="#保存命令" class="headerlink" title="保存命令"></a>保存命令</h3><pre><code>按ESC键 跳到命令模式，然后：:w   保存文件但不退出vi:w file 将修改另外保存到file中，不退出vi:w!   强制保存，不推出vi:wq  保存文件并退出vi:wq! 强制保存文件，并退出viq:  不保存文件，退出vi:q! 不保存文件，强制退出vi:e! 放弃所有修改，从上次保存文件开始再编辑</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;进入vi的命令&quot;&gt;&lt;a href=&quot;#进入vi的命令&quot; class=&quot;headerlink&quot; title=&quot;进入vi的命令&quot;&gt;&lt;/a&gt;进入vi的命令&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;vi filename :打开或新建文件,并将光标置于第一行首
vi n filen
      
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>git的撤销操作</title>
    <link href="http://yoursite.com/2018/08/20/git%E7%9A%84%E6%92%A4%E9%94%80%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/08/20/git的撤销操作/</id>
    <published>2018-08-20T11:55:46.000Z</published>
    <updated>2018-08-20T17:47:42.708Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚在使用git commit之后要push，提示报错，原因就不多说了。特意总结了一下如果要撤销add或者commit操作应该怎么做,当然在git status的时候也会自动提示可以用什么操作(5月28日也有过一次对撤销的小结，当时仅仅是撤销文件的更改)<br><a id="more"></a></p><h3 id="撤销add"><a href="#撤销add" class="headerlink" title="撤销add"></a>撤销add</h3><p>git add 如果添加了错误的文件的话想要撤销</p><ol><li>git status 先看一下add 中的文件 </li><li>git reset HEAD 如果后面什么都不跟的话 就是回到上一次状态 add里面的全部撤销了<br>————–or—————</li><li>git reset HEAD <file> 就是对某个文件进行撤销了</file></li></ol><h3 id="撤销commit"><a href="#撤销commit" class="headerlink" title="撤销commit"></a>撤销commit</h3><p>已经commit了但是没有Push,想要撤销commit的内容</p><ol><li>找到之前提交的git commit的id<br>git log<br>找到想要撤销的id </li><li>git reset –hard id<br>完成撤销,同时将代码恢复到指定 id 对应的版本<br>————–or—————</li><li>git reset id<br>完成Commit命令的撤销，但是不对代码修改进行撤销，可以直接通过git commit 重新提交对本地代码的修改</li></ol><h3 id="撤销文件的修改"><a href="#撤销文件的修改" class="headerlink" title="撤销文件的修改"></a>撤销文件的修改</h3><p>将本次对文件的所有修改撤销,直接对内容撤销的不是对暂存区</p><p>git checkout – <file></file></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚刚在使用git commit之后要push，提示报错，原因就不多说了。特意总结了一下如果要撤销add或者commit操作应该怎么做,当然在git status的时候也会自动提示可以用什么操作(5月28日也有过一次对撤销的小结，当时仅仅是撤销文件的更改)&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>迟到的暑期培训总结</title>
    <link href="http://yoursite.com/2018/08/20/%E6%9A%91%E6%9C%9F%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2018/08/20/暑期总结报告/</id>
    <published>2018-08-19T17:56:56.000Z</published>
    <updated>2018-08-20T11:12:44.905Z</updated>
    
    <content type="html"><![CDATA[<p>早就应该写的了，拖着拖着就到现在了<br><a id="more"></a></p><h3 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h3><ul><li><p>开张的前几天，做牛做马当木工，总算是把原本空荡荡的房间变得有模有样了</p></li><li><p>之后的前半段时间真的是被奥克斯的hot wind 逼疯了，在空调师傅的师傅拯救下终于感受到了什么是凉爽，虽然空调修好后一堆人感冒生病(AUX:这锅我背了)</p></li><li><p>期间大爷和holy经常拍大家伙的黑照，然后P表情包，中午大致三足鼎立 开黑打王者，肝痒痒鼠，睡觉；晚上吃完饭后也是王者，吃鸡，阴阳师，元气，看番看剧</p></li><li><p>经历了两碗的生日party，那晚的场面一度混乱，一切都是从大爷反手往我脸上一糊开始~~~</p></li><li><p>培训时间进入尾期的时候，，看了几天的电影(无间道：这锅我背了)，不得不说无间道真的好看，还有傻嗨三宝看沙海，附上宝图一张</p></li></ul><p><img src="暑期总结报告/1234.png" width="256" height="256"></p><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>还是学会了挺多东西，虽然也有很多东西还没学<br>进行一波非常简洁的概括，可能会漏掉一些(详情请见之前的博文)</p><ul><li>知道git的多人合作流程</li><li>有了自己的云服务器</li><li>http和https的瓜葛</li><li>深入了解事件循环机制</li><li>js基础知识譬如继承、作用域、上下文</li><li>express的各种操作</li><li>HTML和CSS基础的学了，可以做出像新世界这种简单的界面了</li><li>做项目的时候经历了各种逻辑风暴和BUG袭击</li><li>Affair项目后台方面剩下一个消息界面的逻辑实在是搞不清，绕来绕去都是不妥的，其他的接口已经写好并测试完毕(有一些我是觉得逻辑上还能更清晰的，但是现在没有技术)，然而对接并没有完成</li></ul><p>放假在家也是会继续学习的，学习使我快乐</p><h3 id="从化之旅"><a href="#从化之旅" class="headerlink" title="从化之旅"></a>从化之旅</h3><p>开门见山：这次从化别墅温泉之旅真的是非常非常嗨森✧<em>｡٩(ˊᗜˋ</em>)و✧*｡</p><ul><li>在华润万家大扫购并达成了1436会师，之后一起滴滴前往别墅</li><li>初入别墅，四层(还是五层？)的设计，温泉，烧烤摊，电影房，桌游房，麻将房，唱K区应有尽有</li><li>当天下午大一的唱K(前半场是浩立和大爷的主场，后半场是屹彬的主场)，大二的做饭，此处表扬居家好男人林荣耀，不仅代码敲得溜、天天跑业务、还能烧得一手好菜，可谓是出得厅堂入得厨房，品尝到了周老板做的超级美味的传说中的海底捞版本的面筋塞蛋和小恬恬香喷喷的炒饭</li><li>吃完饭轮到大一的负责准备晚上烧烤用的食材，大二的去休息唱K啦(小恬恬唱的贼好听)<br>晚上，国家一级烧烤运动员jio大爷和周老板的烧烤摊开张，其他人则是在旁边打UNO嗷嗷待哺</li><li>人生第一次泡温泉，这个水温有毒，经久不衰盖如此乎，经过温泉水洗礼整个人都要升天了</li><li>半夜因为看不了电影，就一堆人挤在2张床上听所谓的恐怖故事，然而并没有发觉哪里恐怖，催眠了一个菠萝就有的。</li><li>之后除了麻将组决战到天光其他人差不多都是4点多回各自的房间训教了</li><li>第二天早上收拾东西走人，吃了一顿丰盛的早午餐就搭车翻来了</li></ul><font size="5" color="#D9D9F3" face="Georgia"><br>前进吧<br>无需鲜衣怒马<br>不用壮志豪言<br><br></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;早就应该写的了，拖着拖着就到现在了&lt;br&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>https协议二次了解</title>
    <link href="http://yoursite.com/2018/08/19/https%E5%8D%8F%E8%AE%AE%E4%BA%8C%E6%AC%A1%E4%BA%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/08/19/https协议二次了解/</id>
    <published>2018-08-19T09:49:15.000Z</published>
    <updated>2018-08-19T10:27:12.769Z</updated>
    
    <content type="html"><![CDATA[<p>7月14日的时候学习到了http的一些事项，三次握手，跨域，缓存,csp等等，以及https相比http的一些优势，在这里再次深入了解一下https<br><a id="more"></a></p><h3 id="HTTPS的基本概念"><a href="#HTTPS的基本概念" class="headerlink" title="HTTPS的基本概念"></a>HTTPS的基本概念</h3><blockquote><p>HTTPS是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p></blockquote><blockquote><p>大特点也是优势有：数据加密、信道复用、分帧传输</p></blockquote><blockquote><p>HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。简单来说，HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全。</p></blockquote><h3 id="HTTPS和HTTP的区别"><a href="#HTTPS和HTTP的区别" class="headerlink" title="HTTPS和HTTP的区别"></a>HTTPS和HTTP的区别</h3><blockquote><p>1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。<br>2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。<br>3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。<br>4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p></blockquote><h3 id="HTTPS工作原理"><a href="#HTTPS工作原理" class="headerlink" title="HTTPS工作原理"></a>HTTPS工作原理</h3><blockquote><p>客户端在使用HTTPS方式与Web服务器通信时有以下几个步骤，如图所示。<br><img src="1-150H120343I41.jpg" alt=""></p></blockquote><blockquote><p>（1）客户使用https的URL访问Web服务器，要求与Web服务器建立SSL连接。</p></blockquote><blockquote><p>（2）Web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。</p></blockquote><blockquote><p>（3）客户端的浏览器与Web服务器开始协商SSL连接的安全等级，也就是信息加密的等级。</p></blockquote><blockquote><p>（4）客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。</p></blockquote><blockquote><p>（5）Web服务器利用自己的私钥解密出会话密钥。</p></blockquote><blockquote><p>（6）Web服务器利用会话密钥加密与客户端之间的通信。<br><img src="2012071410212142.gif" alt=""></p></blockquote><h3 id="HTTPS缺点"><a href="#HTTPS缺点" class="headerlink" title="HTTPS缺点"></a>HTTPS缺点</h3><blockquote><p>虽然说HTTPS有很大的优势，但其相对来说，还是存在不足之处的：</p></blockquote><blockquote><p>（1）HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%；   </p></blockquote><blockquote><p>（2）HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；</p></blockquote><blockquote><p>（3）SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。</p></blockquote><blockquote><p>（4）SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。</p></blockquote><blockquote><p>（5）HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;7月14日的时候学习到了http的一些事项，三次握手，跨域，缓存,csp等等，以及https相比http的一些优势，在这里再次深入了解一下https&lt;br&gt;
    
    </summary>
    
    
      <category term="https" scheme="http://yoursite.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>token机制二次学习</title>
    <link href="http://yoursite.com/2018/07/31/token%E6%9C%BA%E5%88%B6%E4%BA%8C%E6%AC%A1%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/07/31/token机制二次学习/</id>
    <published>2018-07-31T07:59:34.000Z</published>
    <updated>2018-08-20T17:46:12.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传统的session认证"><a href="#传统的session认证" class="headerlink" title="传统的session认证"></a>传统的session认证</h2><p>   HTTP 是一种没有状态的协议，也就是它并不知道是谁是访问应用。这里我们把用户看成是客户端，客户端使用用户名还有密码通过了身份验证，不过下回这个客户端再发送请求时候，还得再验证一下。</p><p>   解决的方法就是，当用户请求登录的时候，如果没有问题，我们在服务端生成一条记录，这个记录里可以说明一下登录的用户是谁，然后把这条记录的 ID 号发送给客户端，客户端收到以后把这个 ID 号存储在 Cookie 里，下次这个用户再向服务端发送请求的时候，可以带着这个 Cookie ，这样服务端会验证一个这个 Cookie 里的信息，看看能不能在服务端这里找到对应的记录，如果可以，说明用户已经通过了身份验证，就把用户请求的数据返回给客户端。</p><p>   上面说的就是 Session，我们需要在服务端存储为登录的用户生成的 Session ，这些 Session 可能会存储在内存，磁盘，或者数据库里。我们可能需要在服务端定期的去清理过期的 Session 。</p><p>   但是这种基于session的认证使应用本身很难得扩展，随着不用客户端的增加，独立的服务器已无法承载更多的用户，而这个时候基于session认证应用的问题就会暴露出来</p><h2 id="基于token机制的认证"><a href="#基于token机制的认证" class="headerlink" title="基于token机制的认证"></a>基于token机制的认证</h2><p>使用token机制的身份验证方法，在服务器端不需要存储用户的登录记录。大概的流程：</p><ul><li>客户端使用用户名和密码请求登录。</li><li>服务端收到请求，验证用户名和密码。验证成功后，服务端会生成一个token，然后把这个token发送给客户端。</li><li>客户端收到token后把它存储起来，可以放在cookie或者Local Storage（本地存储）里。</li><li>客户端每次向服务端发送请求的时候都需要带上服务端发给的token。</li><li>服务端收到请求，然后去验证客户端请求里面带着token，如果验证成功，就向客户端返回请求的数据。</li></ul><p>相比于传统sessionid都要存起来，token可以存到数据库中，但是有可能查询token的时间会过长导致token丢失（其实token丢失了再重新认证一个就好，但是别丢太频繁，别让用户没事儿就去认证）。</p><p>为了避免查询时间过长，可以将token放到内存中。这样查询速度绝对就不是问题了，也不用太担心占据内存，占不了多少内存的。</p><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p>JWT由三部分构成   头部（header）载荷（payload）签名（signature）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">header</span><br><span class="line">&#123;</span><br><span class="line">     <span class="string">'typ'</span>:<span class="string">'JWT'</span>, <span class="comment">//类型</span></span><br><span class="line">     <span class="string">'alg'</span>:<span class="string">'HS256'</span>  <span class="comment">//加密算法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">payload</span><br><span class="line">&#123;  原有注册声明</span><br><span class="line">    iss：jwt签发者</span><br><span class="line">    sub：jwt所面向的用户</span><br><span class="line">    aud：接收jwt的一方</span><br><span class="line">    exp：jwt的过期时间，这个过期时间必须大于签发时间</span><br><span class="line">    nbf：定义在什么时间之前，该jwt都是不可用的</span><br><span class="line">    iat：jwt的签发时间</span><br><span class="line">    jti：jwt的唯一身份标识，主要用来作为一次性token，从而回避重放攻击 </span><br><span class="line"></span><br><span class="line">    公共的声明可以添加任何的信息，一般添加用户的相关信息</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"beichen"</span></span><br><span class="line">    <span class="string">"admin"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第三部分signature需要header+payload+secret</span><br><span class="line">secret是密钥，可以是随便打的字符串 (我记得string或者buffer类型？)</span><br><span class="line">secret是保存在服务器端的，jwt的签发也是在服务端的，secret就是用来进行jwt的签发和jwt的验证，所以它就是你服务端的私钥，在任何场景都不应该流露出去，一旦客户端得知这个secret，那就意味着客户端可以自我签发jwt了</span><br></pre></td></tr></table></figure><h2 id="在node中JWT的应用"><a href="#在node中JWT的应用" class="headerlink" title="在node中JWT的应用"></a>在node中JWT的应用</h2><p>用本次项目的应用举例</p><p>在这个token.js文件里，我是先封装了两个方法，一个用来生成token，一个用来解密<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">'jsonwebtoken'</span>);</span><br><span class="line"><span class="keyword">const</span> secret = <span class="string">'zxc'</span> </span><br><span class="line"></span><br><span class="line">getToken = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> jwt.sign(data, secret, &#123;</span><br><span class="line">        expiresIn: <span class="string">"168h"</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getVerify = <span class="function">(<span class="params">token</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> jwt.verify(token,secret)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    getToken,</span><br><span class="line">    getVerify</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在其他涉及到token的地方，导入上面的js文件后就可以直接调用两个方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">登录时生成token并返回给客户端</span><br><span class="line">router.get(<span class="string">'/login'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> data = &#123;</span><br><span class="line">        username : <span class="string">'testAccount'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">var</span> token = jwt.getToken(data)</span><br><span class="line">    <span class="comment">//  var username = jwt.getVerify(token).username</span></span><br><span class="line">    res.json(&#123;</span><br><span class="line">      code:<span class="number">200</span>,</span><br><span class="line">      username:data.username,</span><br><span class="line">      userphoto:data.userphoto,</span><br><span class="line">      token</span><br><span class="line">     </span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jwt = <span class="built_in">require</span>(<span class="string">'./token'</span>);</span><br><span class="line">router.post(<span class="string">'*'</span>, (req, res,next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> token = req.body.token;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        jwt.getVerify(token);<span class="comment">//因为是写成同步操作，所以可能出现异常，要自行捕获</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Token过期'</span>)</span><br><span class="line">       <span class="keyword">return</span> res.json(&#123;</span><br><span class="line">              msg: <span class="string">'Token过期'</span></span><br><span class="line">               &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Token未过期'</span>)</span><br><span class="line">    <span class="keyword">return</span> next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;传统的session认证&quot;&gt;&lt;a href=&quot;#传统的session认证&quot; class=&quot;headerlink&quot; title=&quot;传统的session认证&quot;&gt;&lt;/a&gt;传统的session认证&lt;/h2&gt;&lt;p&gt;   HTTP 是一种没有状态的协议，也就是它并不知道是谁是
      
    
    </summary>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
</feed>
